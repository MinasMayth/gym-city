{'policy': OrderedDict([('mlp_extractor.policy_net.0.weight', tensor([[ 0.0058,  0.0052,  0.0293,  ..., -0.0219, -0.0165,  0.0217],
        [ 0.0041,  0.0136,  0.0040,  ...,  0.0133, -0.0137,  0.0076],
        [-0.0040, -0.0158,  0.0047,  ...,  0.0291, -0.0115,  0.0027],
        ...,
        [-0.0046,  0.0085,  0.0093,  ...,  0.0261,  0.0004, -0.0061],
        [ 0.0028, -0.0060, -0.0191,  ..., -0.0046, -0.0064, -0.0147],
        [ 0.0174, -0.0310, -0.0058,  ...,  0.0066, -0.0523, -0.0235]],
       device='cuda:0')), ('mlp_extractor.policy_net.0.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')), ('mlp_extractor.policy_net.2.weight', tensor([[ 0.2166, -0.0443, -0.0998,  ...,  0.0744,  0.0149, -0.5650],
        [-0.0312,  0.1262, -0.2897,  ...,  0.0806,  0.0160, -0.0820],
        [-0.0737,  0.1961, -0.0660,  ...,  0.2559,  0.0772,  0.1240],
        ...,
        [-0.3640,  0.1134, -0.0011,  ..., -0.2175, -0.2093, -0.2368],
        [ 0.2038,  0.2534, -0.0163,  ..., -0.4241, -0.1800, -0.3048],
        [-0.2258, -0.0729, -0.0848,  ...,  0.1139, -0.0618, -0.0230]],
       device='cuda:0')), ('mlp_extractor.policy_net.2.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')), ('mlp_extractor.value_net.0.weight', tensor([[-0.0253,  0.0087,  0.0077,  ..., -0.0129,  0.0062,  0.0096],
        [-0.0271,  0.0145,  0.0074,  ...,  0.0043,  0.0023, -0.0064],
        [ 0.0186,  0.0210, -0.0111,  ...,  0.0195, -0.0105, -0.0216],
        ...,
        [-0.0066,  0.0346, -0.0314,  ..., -0.0054,  0.0095,  0.0177],
        [ 0.0109, -0.0078, -0.0027,  ..., -0.0198,  0.0099,  0.0247],
        [ 0.0313,  0.0029,  0.0018,  ...,  0.0270, -0.0222, -0.0135]],
       device='cuda:0')), ('mlp_extractor.value_net.0.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')), ('mlp_extractor.value_net.2.weight', tensor([[ 0.1026, -0.0293, -0.0712,  ...,  0.2277, -0.0338, -0.0365],
        [-0.0235, -0.1591,  0.3277,  ...,  0.1240,  0.2343,  0.1499],
        [ 0.1793, -0.0850,  0.2590,  ..., -0.1680, -0.2000, -0.0832],
        ...,
        [-0.0260,  0.2198, -0.1985,  ...,  0.0917, -0.0223,  0.0721],
        [ 0.0309,  0.1192,  0.2564,  ...,  0.1336, -0.2088, -0.0706],
        [ 0.1016,  0.1808,  0.2425,  ..., -0.2295,  0.0875, -0.2978]],
       device='cuda:0')), ('mlp_extractor.value_net.2.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       device='cuda:0')), ('action_net.weight', tensor([[ 2.3082e-04,  2.4631e-04, -1.1776e-05,  ...,  2.8542e-04,
         -1.6054e-04, -1.5187e-04],
        [ 1.6247e-04,  1.2584e-04,  1.3141e-04,  ...,  4.9992e-05,
         -2.6530e-04,  3.5858e-04],
        [-2.3860e-04, -2.5252e-04,  2.1760e-04,  ...,  1.3605e-04,
          4.7594e-05,  7.9337e-05],
        ...,
        [-4.3032e-04,  3.0072e-04,  1.4152e-05,  ...,  3.8638e-04,
         -8.1535e-05,  6.2246e-05],
        [-9.0733e-05, -1.6812e-05, -4.9345e-05,  ..., -2.4251e-04,
          1.3108e-04,  4.4555e-04],
        [-8.8705e-05, -4.5263e-04,  7.5292e-05,  ..., -1.5717e-04,
         -3.0030e-05,  1.7401e-04]], device='cuda:0')), ('action_net.bias', tensor([0., 0., 0.,  ..., 0., 0., 0.], device='cuda:0')), ('value_net.weight', tensor([[ 1.4204e-01, -9.3990e-03,  1.0785e-01,  1.1036e-01,  1.0301e-01,
         -6.0275e-02, -7.8166e-02,  5.7023e-02, -1.5199e-01,  1.8781e-01,
         -1.2449e-01, -4.7420e-02,  7.4577e-03, -2.0921e-01,  9.9877e-03,
          3.5052e-02,  1.2043e-01,  7.3681e-02,  9.4425e-05, -6.7334e-02,
          1.9078e-01, -3.5953e-02, -1.6835e-01, -2.0946e-02,  2.2288e-01,
          5.4557e-02, -2.4002e-01, -1.2398e-02, -9.2349e-02,  2.5417e-02,
          6.7319e-02, -1.0473e-01, -8.8203e-02,  4.8623e-02,  1.1422e-01,
          5.6796e-02, -1.2973e-01,  2.6590e-01,  6.3711e-02,  3.3021e-02,
         -2.5907e-02, -1.1871e-02, -1.1792e-01, -1.6837e-01,  1.4360e-02,
         -4.3964e-02, -5.3368e-02,  2.2332e-01,  4.6160e-02, -3.0677e-01,
          4.1922e-02,  2.4915e-01,  5.5036e-02,  7.2819e-02,  2.3881e-01,
          9.2733e-02, -3.1368e-01,  6.8279e-02, -8.3010e-02,  8.0024e-02,
          3.1011e-02, -6.2750e-02,  9.1749e-02,  6.5576e-02]], device='cuda:0')), ('value_net.bias', tensor([0.], device='cuda:0'))]), 'policy.optimizer': {'state': {}, 'param_groups': [{'lr': 0.0007, 'momentum': 0, 'alpha': 0.99, 'eps': 1e-05, 'centered': False, 'weight_decay': 0, 'params': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}]}}