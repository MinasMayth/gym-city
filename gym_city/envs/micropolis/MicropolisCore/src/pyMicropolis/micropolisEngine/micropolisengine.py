# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _micropolisengine
else:
    import _micropolisengine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def getPythonCallbackHook() -> "CallbackFunction":
    return _micropolisengine.getPythonCallbackHook()

def getPythonCallbackData(data: "PyObject *") -> "void *":
    return _micropolisengine.getPythonCallbackData(data)
IS_INTEL = _micropolisengine.IS_INTEL
MICROPOLIS_VERSION = _micropolisengine.MICROPOLIS_VERSION
HISTORY_TYPE_RES = _micropolisengine.HISTORY_TYPE_RES
HISTORY_TYPE_COM = _micropolisengine.HISTORY_TYPE_COM
HISTORY_TYPE_IND = _micropolisengine.HISTORY_TYPE_IND
HISTORY_TYPE_MONEY = _micropolisengine.HISTORY_TYPE_MONEY
HISTORY_TYPE_CRIME = _micropolisengine.HISTORY_TYPE_CRIME
HISTORY_TYPE_POLLUTION = _micropolisengine.HISTORY_TYPE_POLLUTION
HISTORY_TYPE_COUNT = _micropolisengine.HISTORY_TYPE_COUNT
HISTORY_SCALE_SHORT = _micropolisengine.HISTORY_SCALE_SHORT
HISTORY_SCALE_LONG = _micropolisengine.HISTORY_SCALE_LONG
HISTORY_SCALE_COUNT = _micropolisengine.HISTORY_SCALE_COUNT
MAP_TYPE_ALL = _micropolisengine.MAP_TYPE_ALL
MAP_TYPE_RES = _micropolisengine.MAP_TYPE_RES
MAP_TYPE_COM = _micropolisengine.MAP_TYPE_COM
MAP_TYPE_IND = _micropolisengine.MAP_TYPE_IND
MAP_TYPE_POWER = _micropolisengine.MAP_TYPE_POWER
MAP_TYPE_ROAD = _micropolisengine.MAP_TYPE_ROAD
MAP_TYPE_POPULATION_DENSITY = _micropolisengine.MAP_TYPE_POPULATION_DENSITY
MAP_TYPE_RATE_OF_GROWTH = _micropolisengine.MAP_TYPE_RATE_OF_GROWTH
MAP_TYPE_TRAFFIC_DENSITY = _micropolisengine.MAP_TYPE_TRAFFIC_DENSITY
MAP_TYPE_POLLUTION = _micropolisengine.MAP_TYPE_POLLUTION
MAP_TYPE_CRIME = _micropolisengine.MAP_TYPE_CRIME
MAP_TYPE_LAND_VALUE = _micropolisengine.MAP_TYPE_LAND_VALUE
MAP_TYPE_FIRE_RADIUS = _micropolisengine.MAP_TYPE_FIRE_RADIUS
MAP_TYPE_POLICE_RADIUS = _micropolisengine.MAP_TYPE_POLICE_RADIUS
MAP_TYPE_DYNAMIC = _micropolisengine.MAP_TYPE_DYNAMIC
MAP_TYPE_COUNT = _micropolisengine.MAP_TYPE_COUNT
SPRITE_NOTUSED = _micropolisengine.SPRITE_NOTUSED
SPRITE_TRAIN = _micropolisengine.SPRITE_TRAIN
SPRITE_HELICOPTER = _micropolisengine.SPRITE_HELICOPTER
SPRITE_AIRPLANE = _micropolisengine.SPRITE_AIRPLANE
SPRITE_SHIP = _micropolisengine.SPRITE_SHIP
SPRITE_MONSTER = _micropolisengine.SPRITE_MONSTER
SPRITE_TORNADO = _micropolisengine.SPRITE_TORNADO
SPRITE_EXPLOSION = _micropolisengine.SPRITE_EXPLOSION
SPRITE_BUS = _micropolisengine.SPRITE_BUS
SPRITE_COUNT = _micropolisengine.SPRITE_COUNT
PWRBIT = _micropolisengine.PWRBIT
CONDBIT = _micropolisengine.CONDBIT
BURNBIT = _micropolisengine.BURNBIT
BULLBIT = _micropolisengine.BULLBIT
ANIMBIT = _micropolisengine.ANIMBIT
ZONEBIT = _micropolisengine.ZONEBIT
ALLBITS = _micropolisengine.ALLBITS
LOMASK = _micropolisengine.LOMASK
BLBNBIT = _micropolisengine.BLBNBIT
BLBNCNBIT = _micropolisengine.BLBNCNBIT
BNCNBIT = _micropolisengine.BNCNBIT
CONNECT_TILE_FIX = _micropolisengine.CONNECT_TILE_FIX
CONNECT_TILE_BULLDOZE = _micropolisengine.CONNECT_TILE_BULLDOZE
CONNECT_TILE_ROAD = _micropolisengine.CONNECT_TILE_ROAD
CONNECT_TILE_RAILROAD = _micropolisengine.CONNECT_TILE_RAILROAD
CONNECT_TILE_WIRE = _micropolisengine.CONNECT_TILE_WIRE
TOOLRESULT_NO_MONEY = _micropolisengine.TOOLRESULT_NO_MONEY
TOOLRESULT_NEED_BULLDOZE = _micropolisengine.TOOLRESULT_NEED_BULLDOZE
TOOLRESULT_FAILED = _micropolisengine.TOOLRESULT_FAILED
TOOLRESULT_OK = _micropolisengine.TOOLRESULT_OK
DIRT = _micropolisengine.DIRT
RIVER = _micropolisengine.RIVER
REDGE = _micropolisengine.REDGE
CHANNEL = _micropolisengine.CHANNEL
FIRSTRIVEDGE = _micropolisengine.FIRSTRIVEDGE
LASTRIVEDGE = _micropolisengine.LASTRIVEDGE
WATER_LOW = _micropolisengine.WATER_LOW
WATER_HIGH = _micropolisengine.WATER_HIGH
TREEBASE = _micropolisengine.TREEBASE
WOODS_LOW = _micropolisengine.WOODS_LOW
LASTTREE = _micropolisengine.LASTTREE
WOODS = _micropolisengine.WOODS
UNUSED_TRASH1 = _micropolisengine.UNUSED_TRASH1
UNUSED_TRASH2 = _micropolisengine.UNUSED_TRASH2
WOODS_HIGH = _micropolisengine.WOODS_HIGH
WOODS2 = _micropolisengine.WOODS2
WOODS3 = _micropolisengine.WOODS3
WOODS4 = _micropolisengine.WOODS4
WOODS5 = _micropolisengine.WOODS5
RUBBLE = _micropolisengine.RUBBLE
LASTRUBBLE = _micropolisengine.LASTRUBBLE
FLOOD = _micropolisengine.FLOOD
LASTFLOOD = _micropolisengine.LASTFLOOD
RADTILE = _micropolisengine.RADTILE
UNUSED_TRASH3 = _micropolisengine.UNUSED_TRASH3
UNUSED_TRASH4 = _micropolisengine.UNUSED_TRASH4
UNUSED_TRASH5 = _micropolisengine.UNUSED_TRASH5
FIRE = _micropolisengine.FIRE
FIREBASE = _micropolisengine.FIREBASE
LASTFIRE = _micropolisengine.LASTFIRE
HBRIDGE = _micropolisengine.HBRIDGE
ROADBASE = _micropolisengine.ROADBASE
VBRIDGE = _micropolisengine.VBRIDGE
ROADS = _micropolisengine.ROADS
ROADS2 = _micropolisengine.ROADS2
ROADS3 = _micropolisengine.ROADS3
ROADS4 = _micropolisengine.ROADS4
ROADS5 = _micropolisengine.ROADS5
ROADS6 = _micropolisengine.ROADS6
ROADS7 = _micropolisengine.ROADS7
ROADS8 = _micropolisengine.ROADS8
ROADS9 = _micropolisengine.ROADS9
ROADS10 = _micropolisengine.ROADS10
INTERSECTION = _micropolisengine.INTERSECTION
HROADPOWER = _micropolisengine.HROADPOWER
VROADPOWER = _micropolisengine.VROADPOWER
BRWH = _micropolisengine.BRWH
LTRFBASE = _micropolisengine.LTRFBASE
BRWV = _micropolisengine.BRWV
BRWXXX1 = _micropolisengine.BRWXXX1
BRWXXX2 = _micropolisengine.BRWXXX2
BRWXXX3 = _micropolisengine.BRWXXX3
HTRFBASE = _micropolisengine.HTRFBASE
BRWXXX4 = _micropolisengine.BRWXXX4
BRWXXX5 = _micropolisengine.BRWXXX5
BRWXXX6 = _micropolisengine.BRWXXX6
LASTROAD = _micropolisengine.LASTROAD
BRWXXX7 = _micropolisengine.BRWXXX7
HPOWER = _micropolisengine.HPOWER
VPOWER = _micropolisengine.VPOWER
LHPOWER = _micropolisengine.LHPOWER
LVPOWER = _micropolisengine.LVPOWER
LVPOWER2 = _micropolisengine.LVPOWER2
LVPOWER3 = _micropolisengine.LVPOWER3
LVPOWER4 = _micropolisengine.LVPOWER4
LVPOWER5 = _micropolisengine.LVPOWER5
LVPOWER6 = _micropolisengine.LVPOWER6
LVPOWER7 = _micropolisengine.LVPOWER7
LVPOWER8 = _micropolisengine.LVPOWER8
LVPOWER9 = _micropolisengine.LVPOWER9
LVPOWER10 = _micropolisengine.LVPOWER10
RAILHPOWERV = _micropolisengine.RAILHPOWERV
RAILVPOWERH = _micropolisengine.RAILVPOWERH
POWERBASE = _micropolisengine.POWERBASE
LASTPOWER = _micropolisengine.LASTPOWER
UNUSED_TRASH6 = _micropolisengine.UNUSED_TRASH6
HRAIL = _micropolisengine.HRAIL
VRAIL = _micropolisengine.VRAIL
LHRAIL = _micropolisengine.LHRAIL
LVRAIL = _micropolisengine.LVRAIL
LVRAIL2 = _micropolisengine.LVRAIL2
LVRAIL3 = _micropolisengine.LVRAIL3
LVRAIL4 = _micropolisengine.LVRAIL4
LVRAIL5 = _micropolisengine.LVRAIL5
LVRAIL6 = _micropolisengine.LVRAIL6
LVRAIL7 = _micropolisengine.LVRAIL7
LVRAIL8 = _micropolisengine.LVRAIL8
LVRAIL9 = _micropolisengine.LVRAIL9
LVRAIL10 = _micropolisengine.LVRAIL10
HRAILROAD = _micropolisengine.HRAILROAD
VRAILROAD = _micropolisengine.VRAILROAD
RAILBASE = _micropolisengine.RAILBASE
LASTRAIL = _micropolisengine.LASTRAIL
ROADVPOWERH = _micropolisengine.ROADVPOWERH
RESBASE = _micropolisengine.RESBASE
FREEZ = _micropolisengine.FREEZ
HOUSE = _micropolisengine.HOUSE
LHTHR = _micropolisengine.LHTHR
HHTHR = _micropolisengine.HHTHR
RZB = _micropolisengine.RZB
HOSPITALBASE = _micropolisengine.HOSPITALBASE
HOSPITAL = _micropolisengine.HOSPITAL
CHURCHBASE = _micropolisengine.CHURCHBASE
CHURCH0BASE = _micropolisengine.CHURCH0BASE
CHURCH = _micropolisengine.CHURCH
CHURCH0 = _micropolisengine.CHURCH0
COMBASE = _micropolisengine.COMBASE
COMCLR = _micropolisengine.COMCLR
CZB = _micropolisengine.CZB
COMLAST = _micropolisengine.COMLAST
INDBASE = _micropolisengine.INDBASE
INDCLR = _micropolisengine.INDCLR
LASTIND = _micropolisengine.LASTIND
IND1 = _micropolisengine.IND1
IZB = _micropolisengine.IZB
IND2 = _micropolisengine.IND2
IND3 = _micropolisengine.IND3
IND4 = _micropolisengine.IND4
IND5 = _micropolisengine.IND5
IND6 = _micropolisengine.IND6
IND7 = _micropolisengine.IND7
IND8 = _micropolisengine.IND8
IND9 = _micropolisengine.IND9
PORTBASE = _micropolisengine.PORTBASE
PORT = _micropolisengine.PORT
LASTPORT = _micropolisengine.LASTPORT
AIRPORTBASE = _micropolisengine.AIRPORTBASE
RADAR = _micropolisengine.RADAR
AIRPORT = _micropolisengine.AIRPORT
COALBASE = _micropolisengine.COALBASE
POWERPLANT = _micropolisengine.POWERPLANT
LASTPOWERPLANT = _micropolisengine.LASTPOWERPLANT
FIRESTBASE = _micropolisengine.FIRESTBASE
FIRESTATION = _micropolisengine.FIRESTATION
POLICESTBASE = _micropolisengine.POLICESTBASE
POLICESTATION = _micropolisengine.POLICESTATION
STADIUMBASE = _micropolisengine.STADIUMBASE
STADIUM = _micropolisengine.STADIUM
FULLSTADIUM = _micropolisengine.FULLSTADIUM
NUCLEARBASE = _micropolisengine.NUCLEARBASE
NUCLEAR = _micropolisengine.NUCLEAR
LASTZONE = _micropolisengine.LASTZONE
LIGHTNINGBOLT = _micropolisengine.LIGHTNINGBOLT
HBRDG0 = _micropolisengine.HBRDG0
HBRDG1 = _micropolisengine.HBRDG1
HBRDG2 = _micropolisengine.HBRDG2
HBRDG3 = _micropolisengine.HBRDG3
HBRDG_END = _micropolisengine.HBRDG_END
RADAR0 = _micropolisengine.RADAR0
RADAR1 = _micropolisengine.RADAR1
RADAR2 = _micropolisengine.RADAR2
RADAR3 = _micropolisengine.RADAR3
RADAR4 = _micropolisengine.RADAR4
RADAR5 = _micropolisengine.RADAR5
RADAR6 = _micropolisengine.RADAR6
RADAR7 = _micropolisengine.RADAR7
FOUNTAIN = _micropolisengine.FOUNTAIN
INDBASE2 = _micropolisengine.INDBASE2
TELEBASE = _micropolisengine.TELEBASE
TELELAST = _micropolisengine.TELELAST
SMOKEBASE = _micropolisengine.SMOKEBASE
TINYEXP = _micropolisengine.TINYEXP
SOMETINYEXP = _micropolisengine.SOMETINYEXP
LASTTINYEXP = _micropolisengine.LASTTINYEXP
TINYEXPLAST = _micropolisengine.TINYEXPLAST
COALSMOKE1 = _micropolisengine.COALSMOKE1
COALSMOKE2 = _micropolisengine.COALSMOKE2
COALSMOKE3 = _micropolisengine.COALSMOKE3
COALSMOKE4 = _micropolisengine.COALSMOKE4
FOOTBALLGAME1 = _micropolisengine.FOOTBALLGAME1
FOOTBALLGAME2 = _micropolisengine.FOOTBALLGAME2
VBRDG0 = _micropolisengine.VBRDG0
VBRDG1 = _micropolisengine.VBRDG1
VBRDG2 = _micropolisengine.VBRDG2
VBRDG3 = _micropolisengine.VBRDG3
NUKESWIRL1 = _micropolisengine.NUKESWIRL1
NUKESWIRL2 = _micropolisengine.NUKESWIRL2
NUKESWIRL3 = _micropolisengine.NUKESWIRL3
NUKESWIRL4 = _micropolisengine.NUKESWIRL4
CHURCH1BASE = _micropolisengine.CHURCH1BASE
CHURCH1 = _micropolisengine.CHURCH1
CHURCH2BASE = _micropolisengine.CHURCH2BASE
CHURCH2 = _micropolisengine.CHURCH2
CHURCH3BASE = _micropolisengine.CHURCH3BASE
CHURCH3 = _micropolisengine.CHURCH3
CHURCH4BASE = _micropolisengine.CHURCH4BASE
CHURCH4 = _micropolisengine.CHURCH4
CHURCH5BASE = _micropolisengine.CHURCH5BASE
CHURCH5 = _micropolisengine.CHURCH5
CHURCH6BASE = _micropolisengine.CHURCH6BASE
CHURCH6 = _micropolisengine.CHURCH6
CHURCH7BASE = _micropolisengine.CHURCH7BASE
CHURCH7 = _micropolisengine.CHURCH7
CHURCH7LAST = _micropolisengine.CHURCH7LAST
TILE_COUNT = _micropolisengine.TILE_COUNT
TILE_INVALID = _micropolisengine.TILE_INVALID
TOOL_RESIDENTIAL = _micropolisengine.TOOL_RESIDENTIAL
TOOL_COMMERCIAL = _micropolisengine.TOOL_COMMERCIAL
TOOL_INDUSTRIAL = _micropolisengine.TOOL_INDUSTRIAL
TOOL_FIRESTATION = _micropolisengine.TOOL_FIRESTATION
TOOL_POLICESTATION = _micropolisengine.TOOL_POLICESTATION
TOOL_QUERY = _micropolisengine.TOOL_QUERY
TOOL_WIRE = _micropolisengine.TOOL_WIRE
TOOL_BULLDOZER = _micropolisengine.TOOL_BULLDOZER
TOOL_RAILROAD = _micropolisengine.TOOL_RAILROAD
TOOL_ROAD = _micropolisengine.TOOL_ROAD
TOOL_STADIUM = _micropolisengine.TOOL_STADIUM
TOOL_PARK = _micropolisengine.TOOL_PARK
TOOL_SEAPORT = _micropolisengine.TOOL_SEAPORT
TOOL_COALPOWER = _micropolisengine.TOOL_COALPOWER
TOOL_NUCLEARPOWER = _micropolisengine.TOOL_NUCLEARPOWER
TOOL_AIRPORT = _micropolisengine.TOOL_AIRPORT
TOOL_NETWORK = _micropolisengine.TOOL_NETWORK
TOOL_WATER = _micropolisengine.TOOL_WATER
TOOL_LAND = _micropolisengine.TOOL_LAND
TOOL_FOREST = _micropolisengine.TOOL_FOREST
TOOL_COUNT = _micropolisengine.TOOL_COUNT
TOOL_FIRST = _micropolisengine.TOOL_FIRST
TOOL_LAST = _micropolisengine.TOOL_LAST
SC_NONE = _micropolisengine.SC_NONE
SC_DULLSVILLE = _micropolisengine.SC_DULLSVILLE
SC_SAN_FRANCISCO = _micropolisengine.SC_SAN_FRANCISCO
SC_HAMBURG = _micropolisengine.SC_HAMBURG
SC_BERN = _micropolisengine.SC_BERN
SC_TOKYO = _micropolisengine.SC_TOKYO
SC_DETROIT = _micropolisengine.SC_DETROIT
SC_BOSTON = _micropolisengine.SC_BOSTON
SC_RIO = _micropolisengine.SC_RIO
SC_COUNT = _micropolisengine.SC_COUNT
ZT_COMMERCIAL = _micropolisengine.ZT_COMMERCIAL
ZT_INDUSTRIAL = _micropolisengine.ZT_INDUSTRIAL
ZT_RESIDENTIAL = _micropolisengine.ZT_RESIDENTIAL
ZT_NUM_DESTINATIONS = _micropolisengine.ZT_NUM_DESTINATIONS
CVP_CRIME = _micropolisengine.CVP_CRIME
CVP_POLLUTION = _micropolisengine.CVP_POLLUTION
CVP_HOUSING = _micropolisengine.CVP_HOUSING
CVP_TAXES = _micropolisengine.CVP_TAXES
CVP_TRAFFIC = _micropolisengine.CVP_TRAFFIC
CVP_UNEMPLOYMENT = _micropolisengine.CVP_UNEMPLOYMENT
CVP_FIRE = _micropolisengine.CVP_FIRE
CVP_NUMPROBLEMS = _micropolisengine.CVP_NUMPROBLEMS
CVP_PROBLEM_COMPLAINTS = _micropolisengine.CVP_PROBLEM_COMPLAINTS
PROBNUM = _micropolisengine.PROBNUM
CC_VILLAGE = _micropolisengine.CC_VILLAGE
CC_TOWN = _micropolisengine.CC_TOWN
CC_CITY = _micropolisengine.CC_CITY
CC_CAPITAL = _micropolisengine.CC_CAPITAL
CC_METROPOLIS = _micropolisengine.CC_METROPOLIS
CC_MEGALOPOLIS = _micropolisengine.CC_MEGALOPOLIS
CC_NUM_CITIES = _micropolisengine.CC_NUM_CITIES
LEVEL_EASY = _micropolisengine.LEVEL_EASY
LEVEL_MEDIUM = _micropolisengine.LEVEL_MEDIUM
LEVEL_HARD = _micropolisengine.LEVEL_HARD
LEVEL_COUNT = _micropolisengine.LEVEL_COUNT
LEVEL_FIRST = _micropolisengine.LEVEL_FIRST
LEVEL_LAST = _micropolisengine.LEVEL_LAST

def not_reached(line: "int", fname: "char const *") -> "void":
    return _micropolisengine.not_reached(line, fname)
class Resource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    buf = property(_micropolisengine.Resource_buf_get, _micropolisengine.Resource_buf_set)
    size = property(_micropolisengine.Resource_size_get, _micropolisengine.Resource_size_set)
    name = property(_micropolisengine.Resource_name_get, _micropolisengine.Resource_name_set)
    id = property(_micropolisengine.Resource_id_get, _micropolisengine.Resource_id_set)
    next = property(_micropolisengine.Resource_next_get, _micropolisengine.Resource_next_set)

    def __init__(self):
        _micropolisengine.Resource_swiginit(self, _micropolisengine.new_Resource())
    __swig_destroy__ = _micropolisengine.delete_Resource

# Register Resource in _micropolisengine:
_micropolisengine.Resource_swigregister(Resource)
cvar = _micropolisengine.cvar
WORLD_W = cvar.WORLD_W
WORLD_H = cvar.WORLD_H
BITS_PER_TILE = cvar.BITS_PER_TILE
BYTES_PER_TILE = cvar.BYTES_PER_TILE
WORLD_W_2 = cvar.WORLD_W_2
WORLD_H_2 = cvar.WORLD_H_2
WORLD_W_4 = cvar.WORLD_W_4
WORLD_H_4 = cvar.WORLD_H_4
WORLD_W_8 = cvar.WORLD_W_8
WORLD_H_8 = cvar.WORLD_H_8
EDITOR_TILE_SIZE = cvar.EDITOR_TILE_SIZE
PASSES_PER_CITYTIME = cvar.PASSES_PER_CITYTIME
CITYTIMES_PER_MONTH = cvar.CITYTIMES_PER_MONTH
CITYTIMES_PER_YEAR = cvar.CITYTIMES_PER_YEAR
HISTORY_LENGTH = cvar.HISTORY_LENGTH
MISC_HISTORY_LENGTH = cvar.MISC_HISTORY_LENGTH
HISTORY_COUNT = cvar.HISTORY_COUNT
POWER_STACK_SIZE = cvar.POWER_STACK_SIZE
NOWHERE = cvar.NOWHERE
MAX_TRAFFIC_DISTANCE = cvar.MAX_TRAFFIC_DISTANCE
MAX_ROAD_EFFECT = cvar.MAX_ROAD_EFFECT
MAX_POLICE_STATION_EFFECT = cvar.MAX_POLICE_STATION_EFFECT
MAX_FIRE_STATION_EFFECT = cvar.MAX_FIRE_STATION_EFFECT
RES_VALVE_RANGE = cvar.RES_VALVE_RANGE
COM_VALVE_RANGE = cvar.COM_VALVE_RANGE
IND_VALVE_RANGE = cvar.IND_VALVE_RANGE

class StringTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_micropolisengine.StringTable_id_get, _micropolisengine.StringTable_id_set)
    lines = property(_micropolisengine.StringTable_lines_get, _micropolisengine.StringTable_lines_set)
    strings = property(_micropolisengine.StringTable_strings_get, _micropolisengine.StringTable_strings_set)
    next = property(_micropolisengine.StringTable_next_get, _micropolisengine.StringTable_next_set)

    def __init__(self):
        _micropolisengine.StringTable_swiginit(self, _micropolisengine.new_StringTable())
    __swig_destroy__ = _micropolisengine.delete_StringTable

# Register StringTable in _micropolisengine:
_micropolisengine.StringTable_swigregister(StringTable)

class SimSprite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    next = property(_micropolisengine.SimSprite_next_get, _micropolisengine.SimSprite_next_set)
    name = property(_micropolisengine.SimSprite_name_get, _micropolisengine.SimSprite_name_set)
    type = property(_micropolisengine.SimSprite_type_get, _micropolisengine.SimSprite_type_set)
    frame = property(_micropolisengine.SimSprite_frame_get, _micropolisengine.SimSprite_frame_set)
    x = property(_micropolisengine.SimSprite_x_get, _micropolisengine.SimSprite_x_set)
    y = property(_micropolisengine.SimSprite_y_get, _micropolisengine.SimSprite_y_set)
    width = property(_micropolisengine.SimSprite_width_get, _micropolisengine.SimSprite_width_set)
    height = property(_micropolisengine.SimSprite_height_get, _micropolisengine.SimSprite_height_set)
    xOffset = property(_micropolisengine.SimSprite_xOffset_get, _micropolisengine.SimSprite_xOffset_set)
    yOffset = property(_micropolisengine.SimSprite_yOffset_get, _micropolisengine.SimSprite_yOffset_set)
    xHot = property(_micropolisengine.SimSprite_xHot_get, _micropolisengine.SimSprite_xHot_set)
    yHot = property(_micropolisengine.SimSprite_yHot_get, _micropolisengine.SimSprite_yHot_set)
    origX = property(_micropolisengine.SimSprite_origX_get, _micropolisengine.SimSprite_origX_set)
    origY = property(_micropolisengine.SimSprite_origY_get, _micropolisengine.SimSprite_origY_set)
    destX = property(_micropolisengine.SimSprite_destX_get, _micropolisengine.SimSprite_destX_set)
    destY = property(_micropolisengine.SimSprite_destY_get, _micropolisengine.SimSprite_destY_set)
    count = property(_micropolisengine.SimSprite_count_get, _micropolisengine.SimSprite_count_set)
    soundCount = property(_micropolisengine.SimSprite_soundCount_get, _micropolisengine.SimSprite_soundCount_set)
    dir = property(_micropolisengine.SimSprite_dir_get, _micropolisengine.SimSprite_dir_set)
    newDir = property(_micropolisengine.SimSprite_newDir_get, _micropolisengine.SimSprite_newDir_set)
    step = property(_micropolisengine.SimSprite_step_get, _micropolisengine.SimSprite_step_set)
    flag = property(_micropolisengine.SimSprite_flag_get, _micropolisengine.SimSprite_flag_set)
    control = property(_micropolisengine.SimSprite_control_get, _micropolisengine.SimSprite_control_set)
    turn = property(_micropolisengine.SimSprite_turn_get, _micropolisengine.SimSprite_turn_set)
    accel = property(_micropolisengine.SimSprite_accel_get, _micropolisengine.SimSprite_accel_set)
    speed = property(_micropolisengine.SimSprite_speed_get, _micropolisengine.SimSprite_speed_set)

    def __init__(self):
        _micropolisengine.SimSprite_swiginit(self, _micropolisengine.new_SimSprite())
    __swig_destroy__ = _micropolisengine.delete_SimSprite

# Register SimSprite in _micropolisengine:
_micropolisengine.SimSprite_swigregister(SimSprite)

class Micropolis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _micropolisengine.Micropolis_swiginit(self, _micropolisengine.new_Micropolis())
    __swig_destroy__ = _micropolisengine.delete_Micropolis
    roadTotal = property(_micropolisengine.Micropolis_roadTotal_get, _micropolisengine.Micropolis_roadTotal_set)
    railTotal = property(_micropolisengine.Micropolis_railTotal_get, _micropolisengine.Micropolis_railTotal_set)
    firePop = property(_micropolisengine.Micropolis_firePop_get, _micropolisengine.Micropolis_firePop_set)
    resPop = property(_micropolisengine.Micropolis_resPop_get, _micropolisengine.Micropolis_resPop_set)
    comPop = property(_micropolisengine.Micropolis_comPop_get, _micropolisengine.Micropolis_comPop_set)
    indPop = property(_micropolisengine.Micropolis_indPop_get, _micropolisengine.Micropolis_indPop_set)
    totalPop = property(_micropolisengine.Micropolis_totalPop_get, _micropolisengine.Micropolis_totalPop_set)
    totalPopLast = property(_micropolisengine.Micropolis_totalPopLast_get, _micropolisengine.Micropolis_totalPopLast_set)
    resZonePop = property(_micropolisengine.Micropolis_resZonePop_get, _micropolisengine.Micropolis_resZonePop_set)
    comZonePop = property(_micropolisengine.Micropolis_comZonePop_get, _micropolisengine.Micropolis_comZonePop_set)
    indZonePop = property(_micropolisengine.Micropolis_indZonePop_get, _micropolisengine.Micropolis_indZonePop_set)
    totalZonePop = property(_micropolisengine.Micropolis_totalZonePop_get, _micropolisengine.Micropolis_totalZonePop_set)
    hospitalPop = property(_micropolisengine.Micropolis_hospitalPop_get, _micropolisengine.Micropolis_hospitalPop_set)
    churchPop = property(_micropolisengine.Micropolis_churchPop_get, _micropolisengine.Micropolis_churchPop_set)
    faith = property(_micropolisengine.Micropolis_faith_get, _micropolisengine.Micropolis_faith_set)
    stadiumPop = property(_micropolisengine.Micropolis_stadiumPop_get, _micropolisengine.Micropolis_stadiumPop_set)
    policeStationPop = property(_micropolisengine.Micropolis_policeStationPop_get, _micropolisengine.Micropolis_policeStationPop_set)
    fireStationPop = property(_micropolisengine.Micropolis_fireStationPop_get, _micropolisengine.Micropolis_fireStationPop_set)
    coalPowerPop = property(_micropolisengine.Micropolis_coalPowerPop_get, _micropolisengine.Micropolis_coalPowerPop_set)
    nuclearPowerPop = property(_micropolisengine.Micropolis_nuclearPowerPop_get, _micropolisengine.Micropolis_nuclearPowerPop_set)
    seaportPop = property(_micropolisengine.Micropolis_seaportPop_get, _micropolisengine.Micropolis_seaportPop_set)
    airportPop = property(_micropolisengine.Micropolis_airportPop_get, _micropolisengine.Micropolis_airportPop_set)
    crimeAverage = property(_micropolisengine.Micropolis_crimeAverage_get, _micropolisengine.Micropolis_crimeAverage_set)
    pollutionAverage = property(_micropolisengine.Micropolis_pollutionAverage_get, _micropolisengine.Micropolis_pollutionAverage_set)
    landValueAverage = property(_micropolisengine.Micropolis_landValueAverage_get, _micropolisengine.Micropolis_landValueAverage_set)
    cityTime = property(_micropolisengine.Micropolis_cityTime_get, _micropolisengine.Micropolis_cityTime_set)
    cityMonth = property(_micropolisengine.Micropolis_cityMonth_get, _micropolisengine.Micropolis_cityMonth_set)
    cityYear = property(_micropolisengine.Micropolis_cityYear_get, _micropolisengine.Micropolis_cityYear_set)
    startingYear = property(_micropolisengine.Micropolis_startingYear_get, _micropolisengine.Micropolis_startingYear_set)
    map = property(_micropolisengine.Micropolis_map_get, _micropolisengine.Micropolis_map_set)
    resHist10Max = property(_micropolisengine.Micropolis_resHist10Max_get, _micropolisengine.Micropolis_resHist10Max_set)
    resHist120Max = property(_micropolisengine.Micropolis_resHist120Max_get, _micropolisengine.Micropolis_resHist120Max_set)
    comHist10Max = property(_micropolisengine.Micropolis_comHist10Max_get, _micropolisengine.Micropolis_comHist10Max_set)
    comHist120Max = property(_micropolisengine.Micropolis_comHist120Max_get, _micropolisengine.Micropolis_comHist120Max_set)
    indHist10Max = property(_micropolisengine.Micropolis_indHist10Max_get, _micropolisengine.Micropolis_indHist10Max_set)
    indHist120Max = property(_micropolisengine.Micropolis_indHist120Max_get, _micropolisengine.Micropolis_indHist120Max_set)
    censusChanged = property(_micropolisengine.Micropolis_censusChanged_get, _micropolisengine.Micropolis_censusChanged_set)
    roadSpend = property(_micropolisengine.Micropolis_roadSpend_get, _micropolisengine.Micropolis_roadSpend_set)
    policeSpend = property(_micropolisengine.Micropolis_policeSpend_get, _micropolisengine.Micropolis_policeSpend_set)
    fireSpend = property(_micropolisengine.Micropolis_fireSpend_get, _micropolisengine.Micropolis_fireSpend_set)
    roadFund = property(_micropolisengine.Micropolis_roadFund_get, _micropolisengine.Micropolis_roadFund_set)
    policeFund = property(_micropolisengine.Micropolis_policeFund_get, _micropolisengine.Micropolis_policeFund_set)
    fireFund = property(_micropolisengine.Micropolis_fireFund_get, _micropolisengine.Micropolis_fireFund_set)
    roadEffect = property(_micropolisengine.Micropolis_roadEffect_get, _micropolisengine.Micropolis_roadEffect_set)
    policeEffect = property(_micropolisengine.Micropolis_policeEffect_get, _micropolisengine.Micropolis_policeEffect_set)
    fireEffect = property(_micropolisengine.Micropolis_fireEffect_get, _micropolisengine.Micropolis_fireEffect_set)
    taxFund = property(_micropolisengine.Micropolis_taxFund_get, _micropolisengine.Micropolis_taxFund_set)
    cityTax = property(_micropolisengine.Micropolis_cityTax_get, _micropolisengine.Micropolis_cityTax_set)
    taxFlag = property(_micropolisengine.Micropolis_taxFlag_get, _micropolisengine.Micropolis_taxFlag_set)
    populationDensityMap = property(_micropolisengine.Micropolis_populationDensityMap_get, _micropolisengine.Micropolis_populationDensityMap_set)
    trafficDensityMap = property(_micropolisengine.Micropolis_trafficDensityMap_get, _micropolisengine.Micropolis_trafficDensityMap_set)
    pollutionDensityMap = property(_micropolisengine.Micropolis_pollutionDensityMap_get, _micropolisengine.Micropolis_pollutionDensityMap_set)
    landValueMap = property(_micropolisengine.Micropolis_landValueMap_get, _micropolisengine.Micropolis_landValueMap_set)
    crimeRateMap = property(_micropolisengine.Micropolis_crimeRateMap_get, _micropolisengine.Micropolis_crimeRateMap_set)
    terrainDensityMap = property(_micropolisengine.Micropolis_terrainDensityMap_get, _micropolisengine.Micropolis_terrainDensityMap_set)
    tempMap1 = property(_micropolisengine.Micropolis_tempMap1_get, _micropolisengine.Micropolis_tempMap1_set)
    tempMap2 = property(_micropolisengine.Micropolis_tempMap2_get, _micropolisengine.Micropolis_tempMap2_set)
    tempMap3 = property(_micropolisengine.Micropolis_tempMap3_get, _micropolisengine.Micropolis_tempMap3_set)
    powerGridMap = property(_micropolisengine.Micropolis_powerGridMap_get, _micropolisengine.Micropolis_powerGridMap_set)
    rateOfGrowthMap = property(_micropolisengine.Micropolis_rateOfGrowthMap_get, _micropolisengine.Micropolis_rateOfGrowthMap_set)
    fireStationMap = property(_micropolisengine.Micropolis_fireStationMap_get, _micropolisengine.Micropolis_fireStationMap_set)
    fireStationEffectMap = property(_micropolisengine.Micropolis_fireStationEffectMap_get, _micropolisengine.Micropolis_fireStationEffectMap_set)
    policeStationMap = property(_micropolisengine.Micropolis_policeStationMap_get, _micropolisengine.Micropolis_policeStationMap_set)
    policeStationEffectMap = property(_micropolisengine.Micropolis_policeStationEffectMap_get, _micropolisengine.Micropolis_policeStationEffectMap_set)
    comRateMap = property(_micropolisengine.Micropolis_comRateMap_get, _micropolisengine.Micropolis_comRateMap_set)
    resHist = property(_micropolisengine.Micropolis_resHist_get, _micropolisengine.Micropolis_resHist_set)
    comHist = property(_micropolisengine.Micropolis_comHist_get, _micropolisengine.Micropolis_comHist_set)
    indHist = property(_micropolisengine.Micropolis_indHist_get, _micropolisengine.Micropolis_indHist_set)
    moneyHist = property(_micropolisengine.Micropolis_moneyHist_get, _micropolisengine.Micropolis_moneyHist_set)
    pollutionHist = property(_micropolisengine.Micropolis_pollutionHist_get, _micropolisengine.Micropolis_pollutionHist_set)
    crimeHist = property(_micropolisengine.Micropolis_crimeHist_get, _micropolisengine.Micropolis_crimeHist_set)
    miscHist = property(_micropolisengine.Micropolis_miscHist_get, _micropolisengine.Micropolis_miscHist_set)

    def animateTiles(self) -> "void":
        return _micropolisengine.Micropolis_animateTiles(self)

    @staticmethod
    def getNextAnimatedTile(index: "int") -> "int":
        return _micropolisengine.Micropolis_getNextAnimatedTile(index)
    roadPercent = property(_micropolisengine.Micropolis_roadPercent_get, _micropolisengine.Micropolis_roadPercent_set)
    policePercent = property(_micropolisengine.Micropolis_policePercent_get, _micropolisengine.Micropolis_policePercent_set)
    firePercent = property(_micropolisengine.Micropolis_firePercent_get, _micropolisengine.Micropolis_firePercent_set)
    roadValue = property(_micropolisengine.Micropolis_roadValue_get, _micropolisengine.Micropolis_roadValue_set)
    policeValue = property(_micropolisengine.Micropolis_policeValue_get, _micropolisengine.Micropolis_policeValue_set)
    fireValue = property(_micropolisengine.Micropolis_fireValue_get, _micropolisengine.Micropolis_fireValue_set)
    mustDrawBudget = property(_micropolisengine.Micropolis_mustDrawBudget_get, _micropolisengine.Micropolis_mustDrawBudget_set)

    def initFundingLevel(self) -> "void":
        return _micropolisengine.Micropolis_initFundingLevel(self)

    def doBudget(self) -> "void":
        return _micropolisengine.Micropolis_doBudget(self)

    def doBudgetFromMenu(self) -> "void":
        return _micropolisengine.Micropolis_doBudgetFromMenu(self)

    def doBudgetNow(self, fromMenu: "bool") -> "void":
        return _micropolisengine.Micropolis_doBudgetNow(self, fromMenu)

    def updateBudget(self) -> "void":
        return _micropolisengine.Micropolis_updateBudget(self)

    def showBudgetWindowAndStartWaiting(self) -> "void":
        return _micropolisengine.Micropolis_showBudgetWindowAndStartWaiting(self)

    def setCityTax(self, tax: "short") -> "void":
        return _micropolisengine.Micropolis_setCityTax(self, tax)
    floodCount = property(_micropolisengine.Micropolis_floodCount_get, _micropolisengine.Micropolis_floodCount_set)

    def makeMeltdown(self) -> "void":
        return _micropolisengine.Micropolis_makeMeltdown(self)

    def makeFireBombs(self) -> "void":
        return _micropolisengine.Micropolis_makeFireBombs(self)

    def makeEarthquake(self) -> "void":
        return _micropolisengine.Micropolis_makeEarthquake(self)

    def makeFire(self) -> "void":
        return _micropolisengine.Micropolis_makeFire(self)

    def makeFlood(self) -> "void":
        return _micropolisengine.Micropolis_makeFlood(self)

    def setFire(self) -> "void":
        return _micropolisengine.Micropolis_setFire(self)

    def fireBomb(self) -> "void":
        return _micropolisengine.Micropolis_fireBomb(self)
    cityYes = property(_micropolisengine.Micropolis_cityYes_get, _micropolisengine.Micropolis_cityYes_set)
    problemVotes = property(_micropolisengine.Micropolis_problemVotes_get, _micropolisengine.Micropolis_problemVotes_set)
    problemOrder = property(_micropolisengine.Micropolis_problemOrder_get, _micropolisengine.Micropolis_problemOrder_set)
    cityPop = property(_micropolisengine.Micropolis_cityPop_get, _micropolisengine.Micropolis_cityPop_set)
    cityPopDelta = property(_micropolisengine.Micropolis_cityPopDelta_get, _micropolisengine.Micropolis_cityPopDelta_set)
    cityAssessedValue = property(_micropolisengine.Micropolis_cityAssessedValue_get, _micropolisengine.Micropolis_cityAssessedValue_set)
    cityClass = property(_micropolisengine.Micropolis_cityClass_get, _micropolisengine.Micropolis_cityClass_set)
    cityScore = property(_micropolisengine.Micropolis_cityScore_get, _micropolisengine.Micropolis_cityScore_set)
    cityScoreDelta = property(_micropolisengine.Micropolis_cityScoreDelta_get, _micropolisengine.Micropolis_cityScoreDelta_set)
    trafficAverage = property(_micropolisengine.Micropolis_trafficAverage_get, _micropolisengine.Micropolis_trafficAverage_set)

    def cityEvaluation(self) -> "void":
        return _micropolisengine.Micropolis_cityEvaluation(self)

    def evalInit(self) -> "void":
        return _micropolisengine.Micropolis_evalInit(self)

    def doScoreCard(self) -> "void":
        return _micropolisengine.Micropolis_doScoreCard(self)

    def changeEval(self) -> "void":
        return _micropolisengine.Micropolis_changeEval(self)

    def scoreDoer(self) -> "void":
        return _micropolisengine.Micropolis_scoreDoer(self)

    def countProblems(self) -> "int":
        return _micropolisengine.Micropolis_countProblems(self)

    def getProblemNumber(self, i: "int") -> "int":
        return _micropolisengine.Micropolis_getProblemNumber(self, i)

    def getProblemVotes(self, i: "int") -> "int":
        return _micropolisengine.Micropolis_getProblemVotes(self, i)

    def loadFileDir(self, filename: "char const *", dir: "char const *") -> "bool":
        return _micropolisengine.Micropolis_loadFileDir(self, filename, dir)

    def loadFile(self, filename: "char const *") -> "bool":
        return _micropolisengine.Micropolis_loadFile(self, filename)

    def saveFile(self, filename: "char const *") -> "bool":
        return _micropolisengine.Micropolis_saveFile(self, filename)

    def loadScenario(self, s: "Scenario") -> "void":
        return _micropolisengine.Micropolis_loadScenario(self, s)

    def didLoadScenario(self) -> "void":
        return _micropolisengine.Micropolis_didLoadScenario(self)

    def loadCity(self, filename: "char const *") -> "bool":
        return _micropolisengine.Micropolis_loadCity(self, filename)

    def didLoadCity(self) -> "void":
        return _micropolisengine.Micropolis_didLoadCity(self)

    def didntLoadCity(self, msg: "char const *") -> "void":
        return _micropolisengine.Micropolis_didntLoadCity(self, msg)

    def saveCity(self) -> "void":
        return _micropolisengine.Micropolis_saveCity(self)

    def doSaveCityAs(self) -> "void":
        return _micropolisengine.Micropolis_doSaveCityAs(self)

    def didSaveCity(self) -> "void":
        return _micropolisengine.Micropolis_didSaveCity(self)

    def didntSaveCity(self, msg: "char const *") -> "void":
        return _micropolisengine.Micropolis_didntSaveCity(self, msg)

    def saveCityAs(self, filename: "char const *") -> "void":
        return _micropolisengine.Micropolis_saveCityAs(self, filename)
    terrainTreeLevel = property(_micropolisengine.Micropolis_terrainTreeLevel_get, _micropolisengine.Micropolis_terrainTreeLevel_set)
    terrainLakeLevel = property(_micropolisengine.Micropolis_terrainLakeLevel_get, _micropolisengine.Micropolis_terrainLakeLevel_set)
    terrainCurveLevel = property(_micropolisengine.Micropolis_terrainCurveLevel_get, _micropolisengine.Micropolis_terrainCurveLevel_set)
    terrainCreateIsland = property(_micropolisengine.Micropolis_terrainCreateIsland_get, _micropolisengine.Micropolis_terrainCreateIsland_set)
    generatedCitySeed = property(_micropolisengine.Micropolis_generatedCitySeed_get, _micropolisengine.Micropolis_generatedCitySeed_set)

    def generateMap(self) -> "void":
        return _micropolisengine.Micropolis_generateMap(self)

    def clearMap(self) -> "void":
        return _micropolisengine.Micropolis_clearMap(self)

    def clearUnnatural(self) -> "void":
        return _micropolisengine.Micropolis_clearUnnatural(self)

    def makeIsland(self) -> "void":
        return _micropolisengine.Micropolis_makeIsland(self)

    def treeSplash(self, xloc: "short", yloc: "short") -> "void":
        return _micropolisengine.Micropolis_treeSplash(self, xloc, yloc)

    def makeSingleLake(self, pos: "Position const &") -> "void":
        return _micropolisengine.Micropolis_makeSingleLake(self, pos)

    def plopBRiver(self, pos: "Position const &") -> "void":
        return _micropolisengine.Micropolis_plopBRiver(self, pos)

    def plopSRiver(self, pos: "Position const &") -> "void":
        return _micropolisengine.Micropolis_plopSRiver(self, pos)

    def generateSomeCity(self, seed: "int") -> "void":
        return _micropolisengine.Micropolis_generateSomeCity(self, seed)
    historyInitialized = property(_micropolisengine.Micropolis_historyInitialized_get, _micropolisengine.Micropolis_historyInitialized_set)
    graph10Max = property(_micropolisengine.Micropolis_graph10Max_get, _micropolisengine.Micropolis_graph10Max_set)
    graph120Max = property(_micropolisengine.Micropolis_graph120Max_get, _micropolisengine.Micropolis_graph120Max_set)

    def drawMonth(self, hist: "short *", s: "unsigned char *", scale: "float") -> "void":
        return _micropolisengine.Micropolis_drawMonth(self, hist, s, scale)

    def changeCensus(self) -> "void":
        return _micropolisengine.Micropolis_changeCensus(self)

    def graphDoer(self) -> "void":
        return _micropolisengine.Micropolis_graphDoer(self)

    def initGraphs(self) -> "void":
        return _micropolisengine.Micropolis_initGraphs(self)

    def initGraphMax(self) -> "void":
        return _micropolisengine.Micropolis_initGraphMax(self)

    def getHistoryRange(self, historyType: "int", historyScale: "int") -> "void":
        return _micropolisengine.Micropolis_getHistoryRange(self, historyType, historyScale)

    def getHistory(self, historyType: "int", historyScale: "int", historyIndex: "int") -> "short":
        return _micropolisengine.Micropolis_getHistory(self, historyType, historyScale, historyIndex)

    def setHistory(self, historyType: "int", historyScale: "int", historyIndex: "int", historyValue: "short") -> "void":
        return _micropolisengine.Micropolis_setHistory(self, historyType, historyScale, historyIndex, historyValue)
    simLoops = property(_micropolisengine.Micropolis_simLoops_get, _micropolisengine.Micropolis_simLoops_set)
    simPasses = property(_micropolisengine.Micropolis_simPasses_get, _micropolisengine.Micropolis_simPasses_set)
    simPass = property(_micropolisengine.Micropolis_simPass_get, _micropolisengine.Micropolis_simPass_set)
    simPaused = property(_micropolisengine.Micropolis_simPaused_get, _micropolisengine.Micropolis_simPaused_set)
    simPausedSpeed = property(_micropolisengine.Micropolis_simPausedSpeed_get, _micropolisengine.Micropolis_simPausedSpeed_set)
    tilesAnimated = property(_micropolisengine.Micropolis_tilesAnimated_get, _micropolisengine.Micropolis_tilesAnimated_set)
    doAnimation = property(_micropolisengine.Micropolis_doAnimation_get, _micropolisengine.Micropolis_doAnimation_set)
    doMessages = property(_micropolisengine.Micropolis_doMessages_get, _micropolisengine.Micropolis_doMessages_set)
    doNotices = property(_micropolisengine.Micropolis_doNotices_get, _micropolisengine.Micropolis_doNotices_set)

    def getMicropolisVersion(self) -> "char const *":
        return _micropolisengine.Micropolis_getMicropolisVersion(self)

    def simUpdate(self) -> "void":
        return _micropolisengine.Micropolis_simUpdate(self)

    def simTick(self) -> "void":
        return _micropolisengine.Micropolis_simTick(self)

    def simRobots(self) -> "void":
        return _micropolisengine.Micropolis_simRobots(self)
    cityFileName = property(_micropolisengine.Micropolis_cityFileName_get, _micropolisengine.Micropolis_cityFileName_set)
    cityName = property(_micropolisengine.Micropolis_cityName_get, _micropolisengine.Micropolis_cityName_set)
    cityPopLast = property(_micropolisengine.Micropolis_cityPopLast_get, _micropolisengine.Micropolis_cityPopLast_set)
    categoryLast = property(_micropolisengine.Micropolis_categoryLast_get, _micropolisengine.Micropolis_categoryLast_set)
    autoGoto = property(_micropolisengine.Micropolis_autoGoto_get, _micropolisengine.Micropolis_autoGoto_set)

    def sendMessages(self) -> "void":
        return _micropolisengine.Micropolis_sendMessages(self)

    def checkGrowth(self) -> "void":
        return _micropolisengine.Micropolis_checkGrowth(self)

    def doScenarioScore(self, type: "Scenario") -> "void":
        return _micropolisengine.Micropolis_doScenarioScore(self, type)

    def sendMessage(self, *args) -> "void":
        return _micropolisengine.Micropolis_sendMessage(self, *args)

    def doMakeSound(self, mesgNum: "int", x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_doMakeSound(self, mesgNum, x, y)

    def doAutoGoto(self, x: "short", y: "short", msg: "char *") -> "void":
        return _micropolisengine.Micropolis_doAutoGoto(self, x, y, msg)

    def doLoseGame(self) -> "void":
        return _micropolisengine.Micropolis_doLoseGame(self)

    def doWinGame(self) -> "void":
        return _micropolisengine.Micropolis_doWinGame(self)
    homeDir = property(_micropolisengine.Micropolis_homeDir_get, _micropolisengine.Micropolis_homeDir_set)
    resourceDir = property(_micropolisengine.Micropolis_resourceDir_get, _micropolisengine.Micropolis_resourceDir_set)
    resources = property(_micropolisengine.Micropolis_resources_get, _micropolisengine.Micropolis_resources_set)
    stringTables = property(_micropolisengine.Micropolis_stringTables_get, _micropolisengine.Micropolis_stringTables_set)

    def getResource(self, name: "char const *", id: "Quad") -> "Resource *":
        return _micropolisengine.Micropolis_getResource(self, name, id)

    def getIndString(self, str: "char *", id: "int", num: "short") -> "void":
        return _micropolisengine.Micropolis_getIndString(self, str, id, num)
    valveFlag = property(_micropolisengine.Micropolis_valveFlag_get, _micropolisengine.Micropolis_valveFlag_set)
    crimeRamp = property(_micropolisengine.Micropolis_crimeRamp_get, _micropolisengine.Micropolis_crimeRamp_set)
    pollutionRamp = property(_micropolisengine.Micropolis_pollutionRamp_get, _micropolisengine.Micropolis_pollutionRamp_set)
    resCap = property(_micropolisengine.Micropolis_resCap_get, _micropolisengine.Micropolis_resCap_set)
    comCap = property(_micropolisengine.Micropolis_comCap_get, _micropolisengine.Micropolis_comCap_set)
    indCap = property(_micropolisengine.Micropolis_indCap_get, _micropolisengine.Micropolis_indCap_set)
    cashFlow = property(_micropolisengine.Micropolis_cashFlow_get, _micropolisengine.Micropolis_cashFlow_set)
    externalMarket = property(_micropolisengine.Micropolis_externalMarket_get, _micropolisengine.Micropolis_externalMarket_set)
    disasterEvent = property(_micropolisengine.Micropolis_disasterEvent_get, _micropolisengine.Micropolis_disasterEvent_set)
    disasterWait = property(_micropolisengine.Micropolis_disasterWait_get, _micropolisengine.Micropolis_disasterWait_set)
    scoreType = property(_micropolisengine.Micropolis_scoreType_get, _micropolisengine.Micropolis_scoreType_set)
    scoreWait = property(_micropolisengine.Micropolis_scoreWait_get, _micropolisengine.Micropolis_scoreWait_set)
    poweredZoneCount = property(_micropolisengine.Micropolis_poweredZoneCount_get, _micropolisengine.Micropolis_poweredZoneCount_set)
    unpoweredZoneCount = property(_micropolisengine.Micropolis_unpoweredZoneCount_get, _micropolisengine.Micropolis_unpoweredZoneCount_set)
    newPower = property(_micropolisengine.Micropolis_newPower_get, _micropolisengine.Micropolis_newPower_set)
    cityTaxAverage = property(_micropolisengine.Micropolis_cityTaxAverage_get, _micropolisengine.Micropolis_cityTaxAverage_set)
    simCycle = property(_micropolisengine.Micropolis_simCycle_get, _micropolisengine.Micropolis_simCycle_set)
    phaseCycle = property(_micropolisengine.Micropolis_phaseCycle_get, _micropolisengine.Micropolis_phaseCycle_set)
    speedCycle = property(_micropolisengine.Micropolis_speedCycle_get, _micropolisengine.Micropolis_speedCycle_set)
    doInitialEval = property(_micropolisengine.Micropolis_doInitialEval_get, _micropolisengine.Micropolis_doInitialEval_set)
    mapSerial = property(_micropolisengine.Micropolis_mapSerial_get, _micropolisengine.Micropolis_mapSerial_set)

    def updateFundEffects(self) -> "void":
        return _micropolisengine.Micropolis_updateFundEffects(self)
    spriteList = property(_micropolisengine.Micropolis_spriteList_get, _micropolisengine.Micropolis_spriteList_set)

    def newSprite(self, name: "char const *", type: "int", x: "int", y: "int") -> "SimSprite *":
        return _micropolisengine.Micropolis_newSprite(self, name, type, x, y)

    def initSprite(self, sprite: "SimSprite", x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_initSprite(self, sprite, x, y)

    def destroyAllSprites(self) -> "void":
        return _micropolisengine.Micropolis_destroyAllSprites(self)

    def destroySprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_destroySprite(self, sprite)

    def getSprite(self, type: "int") -> "SimSprite *":
        return _micropolisengine.Micropolis_getSprite(self, type)

    def makeSprite(self, type: "int", x: "int", y: "int") -> "SimSprite *":
        return _micropolisengine.Micropolis_makeSprite(self, type, x, y)

    def getChar(self, x: "int", y: "int") -> "short":
        return _micropolisengine.Micropolis_getChar(self, x, y)

    def turnTo(self, p: "int", d: "int") -> "short":
        return _micropolisengine.Micropolis_turnTo(self, p, d)

    def tryOther(self, Tpoo: "int", Told: "int", Tnew: "int") -> "bool":
        return _micropolisengine.Micropolis_tryOther(self, Tpoo, Told, Tnew)

    def spriteNotInBounds(self, sprite: "SimSprite") -> "bool":
        return _micropolisengine.Micropolis_spriteNotInBounds(self, sprite)

    def getDir(self, orgX: "int", orgY: "int", desX: "int", desY: "int") -> "short":
        return _micropolisengine.Micropolis_getDir(self, orgX, orgY, desX, desY)

    def getDistance(self, x1: "int", y1: "int", x2: "int", y2: "int") -> "int":
        return _micropolisengine.Micropolis_getDistance(self, x1, y1, x2, y2)

    def checkSpriteCollision(self, s1: "SimSprite", s2: "SimSprite") -> "bool":
        return _micropolisengine.Micropolis_checkSpriteCollision(self, s1, s2)

    def moveObjects(self) -> "void":
        return _micropolisengine.Micropolis_moveObjects(self)

    def doTrainSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_doTrainSprite(self, sprite)

    def doCopterSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_doCopterSprite(self, sprite)

    def doAirplaneSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_doAirplaneSprite(self, sprite)

    def doShipSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_doShipSprite(self, sprite)

    def doMonsterSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_doMonsterSprite(self, sprite)

    def doTornadoSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_doTornadoSprite(self, sprite)

    def doExplosionSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_doExplosionSprite(self, sprite)

    def doBusSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_doBusSprite(self, sprite)

    def canDriveOn(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_canDriveOn(self, x, y)

    def explodeSprite(self, sprite: "SimSprite") -> "void":
        return _micropolisengine.Micropolis_explodeSprite(self, sprite)

    def checkWet(self, x: "int") -> "bool":
        return _micropolisengine.Micropolis_checkWet(self, x)

    def destroyMapTile(self, ox: "int", oy: "int") -> "void":
        return _micropolisengine.Micropolis_destroyMapTile(self, ox, oy)

    def startFireInZone(self, Xloc: "int", Yloc: "int", ch: "int") -> "void":
        return _micropolisengine.Micropolis_startFireInZone(self, Xloc, Yloc, ch)

    def startFire(self, x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_startFire(self, x, y)

    def generateTrain(self, x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_generateTrain(self, x, y)

    def generateBus(self, x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_generateBus(self, x, y)

    def generateShip(self) -> "void":
        return _micropolisengine.Micropolis_generateShip(self)

    def makeShipHere(self, x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_makeShipHere(self, x, y)

    def makeMonster(self) -> "void":
        return _micropolisengine.Micropolis_makeMonster(self)

    def makeMonsterAt(self, x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_makeMonsterAt(self, x, y)

    def generateCopter(self, pos: "Position const &") -> "void":
        return _micropolisengine.Micropolis_generateCopter(self, pos)

    def generatePlane(self, pos: "Position const &") -> "void":
        return _micropolisengine.Micropolis_generatePlane(self, pos)

    def makeTornado(self) -> "void":
        return _micropolisengine.Micropolis_makeTornado(self)

    def makeExplosion(self, x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_makeExplosion(self, x, y)

    def makeExplosionAt(self, x: "int", y: "int") -> "void":
        return _micropolisengine.Micropolis_makeExplosionAt(self, x, y)
    totalFunds = property(_micropolisengine.Micropolis_totalFunds_get, _micropolisengine.Micropolis_totalFunds_set)
    autoBulldoze = property(_micropolisengine.Micropolis_autoBulldoze_get, _micropolisengine.Micropolis_autoBulldoze_set)
    autoBudget = property(_micropolisengine.Micropolis_autoBudget_get, _micropolisengine.Micropolis_autoBudget_set)
    messageTimeLast = property(_micropolisengine.Micropolis_messageTimeLast_get, _micropolisengine.Micropolis_messageTimeLast_set)
    gameLevel = property(_micropolisengine.Micropolis_gameLevel_get, _micropolisengine.Micropolis_gameLevel_set)
    initSimLoad = property(_micropolisengine.Micropolis_initSimLoad_get, _micropolisengine.Micropolis_initSimLoad_set)
    scenario = property(_micropolisengine.Micropolis_scenario_get, _micropolisengine.Micropolis_scenario_set)
    simSpeed = property(_micropolisengine.Micropolis_simSpeed_get, _micropolisengine.Micropolis_simSpeed_set)
    simSpeedMeta = property(_micropolisengine.Micropolis_simSpeedMeta_get, _micropolisengine.Micropolis_simSpeedMeta_set)
    enableSound = property(_micropolisengine.Micropolis_enableSound_get, _micropolisengine.Micropolis_enableSound_set)
    enableDisasters = property(_micropolisengine.Micropolis_enableDisasters_get, _micropolisengine.Micropolis_enableDisasters_set)
    messageNumber = property(_micropolisengine.Micropolis_messageNumber_get, _micropolisengine.Micropolis_messageNumber_set)
    evalChanged = property(_micropolisengine.Micropolis_evalChanged_get, _micropolisengine.Micropolis_evalChanged_set)
    blinkFlag = property(_micropolisengine.Micropolis_blinkFlag_get, _micropolisengine.Micropolis_blinkFlag_set)
    callbackHook = property(_micropolisengine.Micropolis_callbackHook_get, _micropolisengine.Micropolis_callbackHook_set)
    callbackData = property(_micropolisengine.Micropolis_callbackData_get, _micropolisengine.Micropolis_callbackData_set)
    userData = property(_micropolisengine.Micropolis_userData_get, _micropolisengine.Micropolis_userData_set)

    @staticmethod
    def testBounds(wx: "int", wy: "int") -> "bool":
        return _micropolisengine.Micropolis_testBounds(wx, wy)

    def spend(self, dollars: "int") -> "void":
        return _micropolisengine.Micropolis_spend(self, dollars)

    def setFunds(self, dollars: "int") -> "void":
        return _micropolisengine.Micropolis_setFunds(self, dollars)

    def tickCount(self) -> "Quad":
        return _micropolisengine.Micropolis_tickCount(self)

    def newPtr(self, size: "int") -> "Ptr":
        return _micropolisengine.Micropolis_newPtr(self, size)

    def freePtr(self, data: "void *") -> "void":
        return _micropolisengine.Micropolis_freePtr(self, data)

    def doPlayNewCity(self) -> "void":
        return _micropolisengine.Micropolis_doPlayNewCity(self)

    def doReallyStartGame(self) -> "void":
        return _micropolisengine.Micropolis_doReallyStartGame(self)

    def doStartLoad(self) -> "void":
        return _micropolisengine.Micropolis_doStartLoad(self)

    def doStartScenario(self, scenario: "int") -> "void":
        return _micropolisengine.Micropolis_doStartScenario(self, scenario)

    def initGame(self) -> "void":
        return _micropolisengine.Micropolis_initGame(self)

    def callback(self, name: "char const *", params: "char const *") -> "void":
        return _micropolisengine.Micropolis_callback(self, name, params)

    def doEarthquake(self, strength: "int") -> "void":
        return _micropolisengine.Micropolis_doEarthquake(self, strength)

    def invalidateMaps(self) -> "void":
        return _micropolisengine.Micropolis_invalidateMaps(self)

    def makeSound(self, channel: "char const *", sound: "char const *", x: "int"=-1, y: "int"=-1) -> "void":
        return _micropolisengine.Micropolis_makeSound(self, channel, sound, x, y)

    def getTile(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getTile(self, x, y)

    def setTile(self, x: "int", y: "int", tile: "int") -> "void":
        return _micropolisengine.Micropolis_setTile(self, x, y, tile)

    def getMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getMapBuffer(self)

    def getPowerGrid(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getPowerGrid(self, x, y)

    def setPowerGrid(self, x: "int", y: "int", power: "int") -> "void":
        return _micropolisengine.Micropolis_setPowerGrid(self, x, y, power)

    def getPowerGridMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getPowerGridMapBuffer(self)

    def getPopulationDensity(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getPopulationDensity(self, x, y)

    def setPopulationDensity(self, x: "int", y: "int", density: "int") -> "void":
        return _micropolisengine.Micropolis_setPopulationDensity(self, x, y, density)

    def getPopulationDensityMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getPopulationDensityMapBuffer(self)

    def getRateOfGrowth(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getRateOfGrowth(self, x, y)

    def setRateOfGrowth(self, x: "int", y: "int", rate: "int") -> "void":
        return _micropolisengine.Micropolis_setRateOfGrowth(self, x, y, rate)

    def getRateOfGrowthMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getRateOfGrowthMapBuffer(self)

    def getTrafficDensity(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getTrafficDensity(self, x, y)

    def setTrafficDensity(self, x: "int", y: "int", density: "int") -> "void":
        return _micropolisengine.Micropolis_setTrafficDensity(self, x, y, density)

    def getTrafficDensityMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getTrafficDensityMapBuffer(self)

    def getPollutionDensity(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getPollutionDensity(self, x, y)

    def setPollutionDensity(self, x: "int", y: "int", density: "int") -> "void":
        return _micropolisengine.Micropolis_setPollutionDensity(self, x, y, density)

    def getPollutionDensityMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getPollutionDensityMapBuffer(self)

    def getCrimeRate(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getCrimeRate(self, x, y)

    def setCrimeRate(self, x: "int", y: "int", rate: "int") -> "void":
        return _micropolisengine.Micropolis_setCrimeRate(self, x, y, rate)

    def getCrimeRateMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getCrimeRateMapBuffer(self)

    def getLandValue(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getLandValue(self, x, y)

    def setLandValue(self, x: "int", y: "int", value: "int") -> "void":
        return _micropolisengine.Micropolis_setLandValue(self, x, y, value)

    def getLandValueMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getLandValueMapBuffer(self)

    def getFireCoverage(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getFireCoverage(self, x, y)

    def setFireCoverage(self, x: "int", y: "int", coverage: "int") -> "void":
        return _micropolisengine.Micropolis_setFireCoverage(self, x, y, coverage)

    def getFireCoverageMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getFireCoverageMapBuffer(self)

    def getPoliceCoverage(self, x: "int", y: "int") -> "int":
        return _micropolisengine.Micropolis_getPoliceCoverage(self, x, y)

    def setPoliceCoverage(self, x: "int", y: "int", coverage: "int") -> "void":
        return _micropolisengine.Micropolis_setPoliceCoverage(self, x, y, coverage)

    def getPoliceCoverageMapBuffer(self) -> "void *":
        return _micropolisengine.Micropolis_getPoliceCoverageMapBuffer(self)

    def doTool(self, tool: "EditingTool", tileX: "short", tileY: "short") -> "ToolResult":
        return _micropolisengine.Micropolis_doTool(self, tool, tileX, tileY)

    def toolDown(self, tool: "EditingTool", tileX: "short", tileY: "short") -> "ToolResult":
        return _micropolisengine.Micropolis_toolDown(self, tool, tileX, tileY)

    def toolDrag(self, tool: "EditingTool", fromX: "short", fromY: "short", toX: "short", toY: "short") -> "void":
        return _micropolisengine.Micropolis_toolDrag(self, tool, fromX, fromY, toX, toY)

    def didTool(self, name: "char const *", x: "short", y: "short") -> "void":
        return _micropolisengine.Micropolis_didTool(self, name, x, y)

    def makeTrafficAt(self, x: "int", y: "int", dest: "ZoneType") -> "short":
        return _micropolisengine.Micropolis_makeTrafficAt(self, x, y, dest)

    def makeTraffic(self, x: "int", y: "int", dest: "ZoneType") -> "short":
        return _micropolisengine.Micropolis_makeTraffic(self, x, y, dest)
    mustUpdateFunds = property(_micropolisengine.Micropolis_mustUpdateFunds_get, _micropolisengine.Micropolis_mustUpdateFunds_set)
    mustUpdateOptions = property(_micropolisengine.Micropolis_mustUpdateOptions_get, _micropolisengine.Micropolis_mustUpdateOptions_set)
    cityTimeLast = property(_micropolisengine.Micropolis_cityTimeLast_get, _micropolisengine.Micropolis_cityTimeLast_set)
    cityYearLast = property(_micropolisengine.Micropolis_cityYearLast_get, _micropolisengine.Micropolis_cityYearLast_set)
    cityMonthLast = property(_micropolisengine.Micropolis_cityMonthLast_get, _micropolisengine.Micropolis_cityMonthLast_set)
    totalFundsLast = property(_micropolisengine.Micropolis_totalFundsLast_get, _micropolisengine.Micropolis_totalFundsLast_set)
    resLast = property(_micropolisengine.Micropolis_resLast_get, _micropolisengine.Micropolis_resLast_set)
    comLast = property(_micropolisengine.Micropolis_comLast_get, _micropolisengine.Micropolis_comLast_set)
    indLast = property(_micropolisengine.Micropolis_indLast_get, _micropolisengine.Micropolis_indLast_set)

    def doUpdateHeads(self) -> "void":
        return _micropolisengine.Micropolis_doUpdateHeads(self)

    def updateMaps(self) -> "void":
        return _micropolisengine.Micropolis_updateMaps(self)

    def updateGraphs(self) -> "void":
        return _micropolisengine.Micropolis_updateGraphs(self)

    def updateEvaluation(self) -> "void":
        return _micropolisengine.Micropolis_updateEvaluation(self)

    def updateHeads(self) -> "void":
        return _micropolisengine.Micropolis_updateHeads(self)

    def updateFunds(self) -> "void":
        return _micropolisengine.Micropolis_updateFunds(self)

    def reallyUpdateFunds(self) -> "void":
        return _micropolisengine.Micropolis_reallyUpdateFunds(self)

    def doTimeStuff(self) -> "void":
        return _micropolisengine.Micropolis_doTimeStuff(self)

    def updateDate(self) -> "void":
        return _micropolisengine.Micropolis_updateDate(self)

    def showValves(self) -> "void":
        return _micropolisengine.Micropolis_showValves(self)

    def drawValve(self) -> "void":
        return _micropolisengine.Micropolis_drawValve(self)

    def setDemand(self, r: "float", c: "float", i: "float") -> "void":
        return _micropolisengine.Micropolis_setDemand(self, r, c, i)

    def updateOptions(self) -> "void":
        return _micropolisengine.Micropolis_updateOptions(self)

    def updateUserInterface(self) -> "void":
        return _micropolisengine.Micropolis_updateUserInterface(self)

    def pause(self) -> "void":
        return _micropolisengine.Micropolis_pause(self)

    def resume(self) -> "void":
        return _micropolisengine.Micropolis_resume(self)

    def setSpeed(self, speed: "short") -> "void":
        return _micropolisengine.Micropolis_setSpeed(self, speed)

    def setPasses(self, passes: "int") -> "void":
        return _micropolisengine.Micropolis_setPasses(self, passes)

    def setGameLevelFunds(self, level: "GameLevel") -> "void":
        return _micropolisengine.Micropolis_setGameLevelFunds(self, level)

    def setGameLevel(self, level: "GameLevel") -> "void":
        return _micropolisengine.Micropolis_setGameLevel(self, level)

    def updateGameLevel(self) -> "void":
        return _micropolisengine.Micropolis_updateGameLevel(self)

    def setCityName(self, name: "std::string const &") -> "void":
        return _micropolisengine.Micropolis_setCityName(self, name)

    def setCleanCityName(self, name: "std::string const &") -> "void":
        return _micropolisengine.Micropolis_setCleanCityName(self, name)

    def setYear(self, year: "int") -> "void":
        return _micropolisengine.Micropolis_setYear(self, year)

    def currentYear(self) -> "int":
        return _micropolisengine.Micropolis_currentYear(self)

    def doNewGame(self) -> "void":
        return _micropolisengine.Micropolis_doNewGame(self)

    def setEnableDisasters(self, value: "bool") -> "void":
        return _micropolisengine.Micropolis_setEnableDisasters(self, value)

    def setAutoBudget(self, value: "bool") -> "void":
        return _micropolisengine.Micropolis_setAutoBudget(self, value)

    def setAutoBulldoze(self, value: "bool") -> "void":
        return _micropolisengine.Micropolis_setAutoBulldoze(self, value)

    def setAutoGoto(self, value: "bool") -> "void":
        return _micropolisengine.Micropolis_setAutoGoto(self, value)

    def setEnableSound(self, value: "bool") -> "void":
        return _micropolisengine.Micropolis_setEnableSound(self, value)

    def setDoAnimation(self, value: "bool") -> "void":
        return _micropolisengine.Micropolis_setDoAnimation(self, value)

    def setDoMessages(self, value: "bool") -> "void":
        return _micropolisengine.Micropolis_setDoMessages(self, value)

    def setDoNotices(self, value: "bool") -> "void":
        return _micropolisengine.Micropolis_setDoNotices(self, value)

    def getDemands(self) -> "void":
        return _micropolisengine.Micropolis_getDemands(self)

# Register Micropolis in _micropolisengine:
_micropolisengine.Micropolis_swigregister(Micropolis)

def Micropolis_getNextAnimatedTile(index: "int") -> "int":
    return _micropolisengine.Micropolis_getNextAnimatedTile(index)

def Micropolis_testBounds(wx: "int", wy: "int") -> "bool":
    return _micropolisengine.Micropolis_testBounds(wx, wy)

STR202_POPULATIONDENSITY_LOW = _micropolisengine.STR202_POPULATIONDENSITY_LOW
STR202_POPULATIONDENSITY_MEDIUM = _micropolisengine.STR202_POPULATIONDENSITY_MEDIUM
STR202_POPULATIONDENSITY_HIGH = _micropolisengine.STR202_POPULATIONDENSITY_HIGH
STR202_POPULATIONDENSITY_VERYHIGH = _micropolisengine.STR202_POPULATIONDENSITY_VERYHIGH
STR202_LANDVALUE_SLUM = _micropolisengine.STR202_LANDVALUE_SLUM
STR202_LANDVALUE_LOWER_CLASS = _micropolisengine.STR202_LANDVALUE_LOWER_CLASS
STR202_LANDVALUE_MIDDLE_CLASS = _micropolisengine.STR202_LANDVALUE_MIDDLE_CLASS
STR202_LANDVALUE_HIGH_CLASS = _micropolisengine.STR202_LANDVALUE_HIGH_CLASS
STR202_CRIME_NONE = _micropolisengine.STR202_CRIME_NONE
STR202_CRIME_LIGHT = _micropolisengine.STR202_CRIME_LIGHT
STR202_CRIME_MODERATE = _micropolisengine.STR202_CRIME_MODERATE
STR202_CRIME_DANGEROUS = _micropolisengine.STR202_CRIME_DANGEROUS
STR202_POLLUTION_NONE = _micropolisengine.STR202_POLLUTION_NONE
STR202_POLLUTION_MODERATE = _micropolisengine.STR202_POLLUTION_MODERATE
STR202_POLLUTION_HEAVY = _micropolisengine.STR202_POLLUTION_HEAVY
STR202_POLLUTION_VERY_HEAVY = _micropolisengine.STR202_POLLUTION_VERY_HEAVY
STR202_GROWRATE_DECLINING = _micropolisengine.STR202_GROWRATE_DECLINING
STR202_GROWRATE_STABLE = _micropolisengine.STR202_GROWRATE_STABLE
STR202_GROWRATE_SLOWGROWTH = _micropolisengine.STR202_GROWRATE_SLOWGROWTH
STR202_GROWRATE_FASTGROWTH = _micropolisengine.STR202_GROWRATE_FASTGROWTH
MESSAGE_NEED_MORE_RESIDENTIAL = _micropolisengine.MESSAGE_NEED_MORE_RESIDENTIAL
MESSAGE_NEED_MORE_COMMERCIAL = _micropolisengine.MESSAGE_NEED_MORE_COMMERCIAL
MESSAGE_NEED_MORE_INDUSTRIAL = _micropolisengine.MESSAGE_NEED_MORE_INDUSTRIAL
MESSAGE_NEED_MORE_ROADS = _micropolisengine.MESSAGE_NEED_MORE_ROADS
MESSAGE_NEED_MORE_RAILS = _micropolisengine.MESSAGE_NEED_MORE_RAILS
MESSAGE_NEED_ELECTRICITY = _micropolisengine.MESSAGE_NEED_ELECTRICITY
MESSAGE_NEED_STADIUM = _micropolisengine.MESSAGE_NEED_STADIUM
MESSAGE_NEED_SEAPORT = _micropolisengine.MESSAGE_NEED_SEAPORT
MESSAGE_NEED_AIRPORT = _micropolisengine.MESSAGE_NEED_AIRPORT
MESSAGE_HIGH_POLLUTION = _micropolisengine.MESSAGE_HIGH_POLLUTION
MESSAGE_HIGH_CRIME = _micropolisengine.MESSAGE_HIGH_CRIME
MESSAGE_TRAFFIC_JAMS = _micropolisengine.MESSAGE_TRAFFIC_JAMS
MESSAGE_NEED_FIRE_STATION = _micropolisengine.MESSAGE_NEED_FIRE_STATION
MESSAGE_NEED_POLICE_STATION = _micropolisengine.MESSAGE_NEED_POLICE_STATION
MESSAGE_BLACKOUTS_REPORTED = _micropolisengine.MESSAGE_BLACKOUTS_REPORTED
MESSAGE_TAX_TOO_HIGH = _micropolisengine.MESSAGE_TAX_TOO_HIGH
MESSAGE_ROAD_NEEDS_FUNDING = _micropolisengine.MESSAGE_ROAD_NEEDS_FUNDING
MESSAGE_FIRE_STATION_NEEDS_FUNDING = _micropolisengine.MESSAGE_FIRE_STATION_NEEDS_FUNDING
MESSAGE_POLICE_NEEDS_FUNDING = _micropolisengine.MESSAGE_POLICE_NEEDS_FUNDING
MESSAGE_FIRE_REPORTED = _micropolisengine.MESSAGE_FIRE_REPORTED
MESSAGE_MONSTER_SIGHTED = _micropolisengine.MESSAGE_MONSTER_SIGHTED
MESSAGE_TORNADO_SIGHTED = _micropolisengine.MESSAGE_TORNADO_SIGHTED
MESSAGE_EARTHQUAKE = _micropolisengine.MESSAGE_EARTHQUAKE
MESSAGE_PLANE_CRASHED = _micropolisengine.MESSAGE_PLANE_CRASHED
MESSAGE_SHIP_CRASHED = _micropolisengine.MESSAGE_SHIP_CRASHED
MESSAGE_TRAIN_CRASHED = _micropolisengine.MESSAGE_TRAIN_CRASHED
MESSAGE_HELICOPTER_CRASHED = _micropolisengine.MESSAGE_HELICOPTER_CRASHED
MESSAGE_HIGH_UNEMPLOYMENT = _micropolisengine.MESSAGE_HIGH_UNEMPLOYMENT
MESSAGE_NO_MONEY = _micropolisengine.MESSAGE_NO_MONEY
MESSAGE_FIREBOMBING = _micropolisengine.MESSAGE_FIREBOMBING
MESSAGE_NEED_MORE_PARKS = _micropolisengine.MESSAGE_NEED_MORE_PARKS
MESSAGE_EXPLOSION_REPORTED = _micropolisengine.MESSAGE_EXPLOSION_REPORTED
MESSAGE_NOT_ENOUGH_FUNDS = _micropolisengine.MESSAGE_NOT_ENOUGH_FUNDS
MESSAGE_BULLDOZE_AREA_FIRST = _micropolisengine.MESSAGE_BULLDOZE_AREA_FIRST
MESSAGE_REACHED_TOWN = _micropolisengine.MESSAGE_REACHED_TOWN
MESSAGE_REACHED_CITY = _micropolisengine.MESSAGE_REACHED_CITY
MESSAGE_REACHED_CAPITAL = _micropolisengine.MESSAGE_REACHED_CAPITAL
MESSAGE_REACHED_METROPOLIS = _micropolisengine.MESSAGE_REACHED_METROPOLIS
MESSAGE_REACHED_MEGALOPOLIS = _micropolisengine.MESSAGE_REACHED_MEGALOPOLIS
MESSAGE_NOT_ENOUGH_POWER = _micropolisengine.MESSAGE_NOT_ENOUGH_POWER
MESSAGE_HEAVY_TRAFFIC = _micropolisengine.MESSAGE_HEAVY_TRAFFIC
MESSAGE_FLOODING_REPORTED = _micropolisengine.MESSAGE_FLOODING_REPORTED
MESSAGE_NUCLEAR_MELTDOWN = _micropolisengine.MESSAGE_NUCLEAR_MELTDOWN
MESSAGE_RIOTS_REPORTED = _micropolisengine.MESSAGE_RIOTS_REPORTED
MESSAGE_STARTED_NEW_CITY = _micropolisengine.MESSAGE_STARTED_NEW_CITY
MESSAGE_LOADED_SAVED_CITY = _micropolisengine.MESSAGE_LOADED_SAVED_CITY
MESSAGE_SCENARIO_WON = _micropolisengine.MESSAGE_SCENARIO_WON
MESSAGE_SCENARIO_LOST = _micropolisengine.MESSAGE_SCENARIO_LOST
MESSAGE_ABOUT_MICROPOLIS = _micropolisengine.MESSAGE_ABOUT_MICROPOLIS
MESSAGE_SCENARIO_DULLSVILLE = _micropolisengine.MESSAGE_SCENARIO_DULLSVILLE
MESSAGE_SCENARIO_SAN_FRANCISCO = _micropolisengine.MESSAGE_SCENARIO_SAN_FRANCISCO
MESSAGE_SCENARIO_HAMBURG = _micropolisengine.MESSAGE_SCENARIO_HAMBURG
MESSAGE_SCENARIO_BERN = _micropolisengine.MESSAGE_SCENARIO_BERN
MESSAGE_SCENARIO_TOKYO = _micropolisengine.MESSAGE_SCENARIO_TOKYO
MESSAGE_SCENARIO_DETROIT = _micropolisengine.MESSAGE_SCENARIO_DETROIT
MESSAGE_SCENARIO_BOSTON = _micropolisengine.MESSAGE_SCENARIO_BOSTON
MESSAGE_SCENARIO_RIO_DE_JANEIRO = _micropolisengine.MESSAGE_SCENARIO_RIO_DE_JANEIRO
MESSAGE_LAST = _micropolisengine.MESSAGE_LAST
class MapByte1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _micropolisengine.MapByte1_swiginit(self, _micropolisengine.new_MapByte1(*args))
    __swig_destroy__ = _micropolisengine.delete_MapByte1
    MAP_BLOCKSIZE = property(_micropolisengine.MapByte1_MAP_BLOCKSIZE_get)
    MAP_W = property(_micropolisengine.MapByte1_MAP_W_get)
    MAP_H = property(_micropolisengine.MapByte1_MAP_H_get)

    def fill(self, val: "unsigned char") -> "void":
        return _micropolisengine.MapByte1_fill(self, val)

    def clear(self) -> "void":
        return _micropolisengine.MapByte1_clear(self)

    def set(self, x: "int", y: "int", val: "unsigned char") -> "void":
        return _micropolisengine.MapByte1_set(self, x, y, val)

    def get(self, x: "int", y: "int") -> "unsigned char":
        return _micropolisengine.MapByte1_get(self, x, y)

    def onMap(self, x: "int", y: "int") -> "bool":
        return _micropolisengine.MapByte1_onMap(self, x, y)

    def worldSet(self, x: "int", y: "int", val: "unsigned char") -> "void":
        return _micropolisengine.MapByte1_worldSet(self, x, y, val)

    def worldGet(self, x: "int", y: "int") -> "unsigned char":
        return _micropolisengine.MapByte1_worldGet(self, x, y)

    def worldOnMap(self, x: "int", y: "int") -> "bool":
        return _micropolisengine.MapByte1_worldOnMap(self, x, y)

    def getBase(self) -> "unsigned char *":
        return _micropolisengine.MapByte1_getBase(self)

# Register MapByte1 in _micropolisengine:
_micropolisengine.MapByte1_swigregister(MapByte1)
ISLAND_RADIUS = cvar.ISLAND_RADIUS

class MapByte2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _micropolisengine.MapByte2_swiginit(self, _micropolisengine.new_MapByte2(*args))
    __swig_destroy__ = _micropolisengine.delete_MapByte2
    MAP_BLOCKSIZE = property(_micropolisengine.MapByte2_MAP_BLOCKSIZE_get)
    MAP_W = property(_micropolisengine.MapByte2_MAP_W_get)
    MAP_H = property(_micropolisengine.MapByte2_MAP_H_get)

    def fill(self, val: "unsigned char") -> "void":
        return _micropolisengine.MapByte2_fill(self, val)

    def clear(self) -> "void":
        return _micropolisengine.MapByte2_clear(self)

    def set(self, x: "int", y: "int", val: "unsigned char") -> "void":
        return _micropolisengine.MapByte2_set(self, x, y, val)

    def get(self, x: "int", y: "int") -> "unsigned char":
        return _micropolisengine.MapByte2_get(self, x, y)

    def onMap(self, x: "int", y: "int") -> "bool":
        return _micropolisengine.MapByte2_onMap(self, x, y)

    def worldSet(self, x: "int", y: "int", val: "unsigned char") -> "void":
        return _micropolisengine.MapByte2_worldSet(self, x, y, val)

    def worldGet(self, x: "int", y: "int") -> "unsigned char":
        return _micropolisengine.MapByte2_worldGet(self, x, y)

    def worldOnMap(self, x: "int", y: "int") -> "bool":
        return _micropolisengine.MapByte2_worldOnMap(self, x, y)

    def getBase(self) -> "unsigned char *":
        return _micropolisengine.MapByte2_getBase(self)

# Register MapByte2 in _micropolisengine:
_micropolisengine.MapByte2_swigregister(MapByte2)

class MapByte4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _micropolisengine.MapByte4_swiginit(self, _micropolisengine.new_MapByte4(*args))
    __swig_destroy__ = _micropolisengine.delete_MapByte4
    MAP_BLOCKSIZE = property(_micropolisengine.MapByte4_MAP_BLOCKSIZE_get)
    MAP_W = property(_micropolisengine.MapByte4_MAP_W_get)
    MAP_H = property(_micropolisengine.MapByte4_MAP_H_get)

    def fill(self, val: "unsigned char") -> "void":
        return _micropolisengine.MapByte4_fill(self, val)

    def clear(self) -> "void":
        return _micropolisengine.MapByte4_clear(self)

    def set(self, x: "int", y: "int", val: "unsigned char") -> "void":
        return _micropolisengine.MapByte4_set(self, x, y, val)

    def get(self, x: "int", y: "int") -> "unsigned char":
        return _micropolisengine.MapByte4_get(self, x, y)

    def onMap(self, x: "int", y: "int") -> "bool":
        return _micropolisengine.MapByte4_onMap(self, x, y)

    def worldSet(self, x: "int", y: "int", val: "unsigned char") -> "void":
        return _micropolisengine.MapByte4_worldSet(self, x, y, val)

    def worldGet(self, x: "int", y: "int") -> "unsigned char":
        return _micropolisengine.MapByte4_worldGet(self, x, y)

    def worldOnMap(self, x: "int", y: "int") -> "bool":
        return _micropolisengine.MapByte4_worldOnMap(self, x, y)

    def getBase(self) -> "unsigned char *":
        return _micropolisengine.MapByte4_getBase(self)

# Register MapByte4 in _micropolisengine:
_micropolisengine.MapByte4_swigregister(MapByte4)

class MapShort8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _micropolisengine.MapShort8_swiginit(self, _micropolisengine.new_MapShort8(*args))
    __swig_destroy__ = _micropolisengine.delete_MapShort8
    MAP_BLOCKSIZE = property(_micropolisengine.MapShort8_MAP_BLOCKSIZE_get)
    MAP_W = property(_micropolisengine.MapShort8_MAP_W_get)
    MAP_H = property(_micropolisengine.MapShort8_MAP_H_get)

    def fill(self, val: "short") -> "void":
        return _micropolisengine.MapShort8_fill(self, val)

    def clear(self) -> "void":
        return _micropolisengine.MapShort8_clear(self)

    def set(self, x: "int", y: "int", val: "short") -> "void":
        return _micropolisengine.MapShort8_set(self, x, y, val)

    def get(self, x: "int", y: "int") -> "short":
        return _micropolisengine.MapShort8_get(self, x, y)

    def onMap(self, x: "int", y: "int") -> "bool":
        return _micropolisengine.MapShort8_onMap(self, x, y)

    def worldSet(self, x: "int", y: "int", val: "short") -> "void":
        return _micropolisengine.MapShort8_worldSet(self, x, y, val)

    def worldGet(self, x: "int", y: "int") -> "short":
        return _micropolisengine.MapShort8_worldGet(self, x, y)

    def worldOnMap(self, x: "int", y: "int") -> "bool":
        return _micropolisengine.MapShort8_worldOnMap(self, x, y)

    def getBase(self) -> "short *":
        return _micropolisengine.MapShort8_getBase(self)

# Register MapShort8 in _micropolisengine:
_micropolisengine.MapShort8_swigregister(MapShort8)



