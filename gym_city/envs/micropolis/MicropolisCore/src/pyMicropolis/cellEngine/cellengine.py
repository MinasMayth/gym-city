# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cellengine
else:
    import _cellengine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


_LINUXCOMPAT_H_ = _cellengine._LINUXCOMPAT_H_
class RECT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    left = property(_cellengine.RECT_left_get, _cellengine.RECT_left_set)
    right = property(_cellengine.RECT_right_get, _cellengine.RECT_right_set)
    top = property(_cellengine.RECT_top_get, _cellengine.RECT_top_set)
    bottom = property(_cellengine.RECT_bottom_get, _cellengine.RECT_bottom_set)

    def __init__(self):
        _cellengine.RECT_swiginit(self, _cellengine.new_RECT())
    __swig_destroy__ = _cellengine.delete_RECT

# Register RECT in _cellengine:
_cellengine.RECT_swigregister(RECT)

CELLENGINE_VERSION = _cellengine.CELLENGINE_VERSION

def Rand32() -> "long":
    return _cellengine.Rand32()

def Rand16() -> "long":
    return _cellengine.Rand16()

def Rand8() -> "long":
    return _cellengine.Rand8()

def PrimeRandoms() -> "void":
    return _cellengine.PrimeRandoms()

def FeedRandom(food: "long") -> "void":
    return _cellengine.FeedRandom(food)
class CellEngine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_cellengine.CellEngine_name_get, _cellengine.CellEngine_name_set)
    screenMem = property(_cellengine.CellEngine_screenMem_get, _cellengine.CellEngine_screenMem_set)
    screenWidth = property(_cellengine.CellEngine_screenWidth_get, _cellengine.CellEngine_screenWidth_set)
    screenHeight = property(_cellengine.CellEngine_screenHeight_get, _cellengine.CellEngine_screenHeight_set)
    screenRowBytes = property(_cellengine.CellEngine_screenRowBytes_get, _cellengine.CellEngine_screenRowBytes_set)
    backMem = property(_cellengine.CellEngine_backMem_get, _cellengine.CellEngine_backMem_set)
    backSize = property(_cellengine.CellEngine_backSize_get, _cellengine.CellEngine_backSize_set)
    backRowBytes = property(_cellengine.CellEngine_backRowBytes_get, _cellengine.CellEngine_backRowBytes_set)
    backWidth = property(_cellengine.CellEngine_backWidth_get, _cellengine.CellEngine_backWidth_set)
    backHeight = property(_cellengine.CellEngine_backHeight_get, _cellengine.CellEngine_backHeight_set)
    backBorder = property(_cellengine.CellEngine_backBorder_get, _cellengine.CellEngine_backBorder_set)
    frontMem = property(_cellengine.CellEngine_frontMem_get, _cellengine.CellEngine_frontMem_set)
    maskMem = property(_cellengine.CellEngine_maskMem_get, _cellengine.CellEngine_maskMem_set)
    maskRowBytes = property(_cellengine.CellEngine_maskRowBytes_get, _cellengine.CellEngine_maskRowBytes_set)
    maskWidth = property(_cellengine.CellEngine_maskWidth_get, _cellengine.CellEngine_maskWidth_set)
    maskHeight = property(_cellengine.CellEngine_maskHeight_get, _cellengine.CellEngine_maskHeight_set)
    masked = property(_cellengine.CellEngine_masked_get, _cellengine.CellEngine_masked_set)
    neighborhood = property(_cellengine.CellEngine_neighborhood_get, _cellengine.CellEngine_neighborhood_set)
    rule = property(_cellengine.CellEngine_rule_get, _cellengine.CellEngine_rule_set)
    ruleStatic = property(_cellengine.CellEngine_ruleStatic_get, _cellengine.CellEngine_ruleStatic_set)
    ruleSize = property(_cellengine.CellEngine_ruleSize_get, _cellengine.CellEngine_ruleSize_set)
    ruleName = property(_cellengine.CellEngine_ruleName_get, _cellengine.CellEngine_ruleName_set)
    x = property(_cellengine.CellEngine_x_get, _cellengine.CellEngine_x_set)
    y = property(_cellengine.CellEngine_y_get, _cellengine.CellEngine_y_set)
    dx = property(_cellengine.CellEngine_dx_get, _cellengine.CellEngine_dx_set)
    dy = property(_cellengine.CellEngine_dy_get, _cellengine.CellEngine_dy_set)
    width = property(_cellengine.CellEngine_width_get, _cellengine.CellEngine_width_set)
    height = property(_cellengine.CellEngine_height_get, _cellengine.CellEngine_height_set)
    idealWidth = property(_cellengine.CellEngine_idealWidth_get, _cellengine.CellEngine_idealWidth_set)
    idealHeight = property(_cellengine.CellEngine_idealHeight_get, _cellengine.CellEngine_idealHeight_set)
    phase = property(_cellengine.CellEngine_phase_get, _cellengine.CellEngine_phase_set)
    ticks = property(_cellengine.CellEngine_ticks_get, _cellengine.CellEngine_ticks_set)
    wrap = property(_cellengine.CellEngine_wrap_get, _cellengine.CellEngine_wrap_set)
    steps = property(_cellengine.CellEngine_steps_get, _cellengine.CellEngine_steps_set)
    frob = property(_cellengine.CellEngine_frob_get, _cellengine.CellEngine_frob_set)
    rumble = property(_cellengine.CellEngine_rumble_get, _cellengine.CellEngine_rumble_set)
    rumblemax = property(_cellengine.CellEngine_rumblemax_get, _cellengine.CellEngine_rumblemax_set)
    hubba = property(_cellengine.CellEngine_hubba_get, _cellengine.CellEngine_hubba_set)
    inflation = property(_cellengine.CellEngine_inflation_get, _cellengine.CellEngine_inflation_set)
    high = property(_cellengine.CellEngine_high_get, _cellengine.CellEngine_high_set)
    low = property(_cellengine.CellEngine_low_get, _cellengine.CellEngine_low_set)
    maskClip = property(_cellengine.CellEngine_maskClip_get, _cellengine.CellEngine_maskClip_set)
    moveImage = property(_cellengine.CellEngine_moveImage_get, _cellengine.CellEngine_moveImage_set)
    numbera = property(_cellengine.CellEngine_numbera_get, _cellengine.CellEngine_numbera_set)
    numberb = property(_cellengine.CellEngine_numberb_get, _cellengine.CellEngine_numberb_set)
    numberc = property(_cellengine.CellEngine_numberc_get, _cellengine.CellEngine_numberc_set)
    anglea = property(_cellengine.CellEngine_anglea_get, _cellengine.CellEngine_anglea_set)
    angleb = property(_cellengine.CellEngine_angleb_get, _cellengine.CellEngine_angleb_set)
    anglec = property(_cellengine.CellEngine_anglec_get, _cellengine.CellEngine_anglec_set)
    pointax = property(_cellengine.CellEngine_pointax_get, _cellengine.CellEngine_pointax_set)
    pointay = property(_cellengine.CellEngine_pointay_get, _cellengine.CellEngine_pointay_set)
    pointbx = property(_cellengine.CellEngine_pointbx_get, _cellengine.CellEngine_pointbx_set)
    pointby = property(_cellengine.CellEngine_pointby_get, _cellengine.CellEngine_pointby_set)
    pointcx = property(_cellengine.CellEngine_pointcx_get, _cellengine.CellEngine_pointcx_set)
    pointcy = property(_cellengine.CellEngine_pointcy_get, _cellengine.CellEngine_pointcy_set)
    clipRects = property(_cellengine.CellEngine_clipRects_get, _cellengine.CellEngine_clipRects_set)
    rectList = property(_cellengine.CellEngine_rectList_get, _cellengine.CellEngine_rectList_set)
    skips = property(_cellengine.CellEngine_skips_get, _cellengine.CellEngine_skips_set)
    skip = property(_cellengine.CellEngine_skip_get, _cellengine.CellEngine_skip_set)
    total = property(_cellengine.CellEngine_total_get, _cellengine.CellEngine_total_set)
    tracking = property(_cellengine.CellEngine_tracking_get, _cellengine.CellEngine_tracking_set)
    action = property(_cellengine.CellEngine_action_get, _cellengine.CellEngine_action_set)
    downx = property(_cellengine.CellEngine_downx_get, _cellengine.CellEngine_downx_set)
    downy = property(_cellengine.CellEngine_downy_get, _cellengine.CellEngine_downy_set)
    grabx = property(_cellengine.CellEngine_grabx_get, _cellengine.CellEngine_grabx_set)
    graby = property(_cellengine.CellEngine_graby_get, _cellengine.CellEngine_graby_set)
    lastx = property(_cellengine.CellEngine_lastx_get, _cellengine.CellEngine_lastx_set)
    lasty = property(_cellengine.CellEngine_lasty_get, _cellengine.CellEngine_lasty_set)
    saveskips = property(_cellengine.CellEngine_saveskips_get, _cellengine.CellEngine_saveskips_set)
    still = property(_cellengine.CellEngine_still_get, _cellengine.CellEngine_still_set)
    gravx = property(_cellengine.CellEngine_gravx_get, _cellengine.CellEngine_gravx_set)
    gravy = property(_cellengine.CellEngine_gravy_get, _cellengine.CellEngine_gravy_set)
    grabbable = property(_cellengine.CellEngine_grabbable_get, _cellengine.CellEngine_grabbable_set)
    data = property(_cellengine.CellEngine_data_get, _cellengine.CellEngine_data_set)

    def __init__(self):
        _cellengine.CellEngine_swiginit(self, _cellengine.new_CellEngine())
    __swig_destroy__ = _cellengine.delete_CellEngine

    def Init(self) -> "void":
        return _cellengine.CellEngine_Init(self)

    def InitScreen(self, ww: "long", hh: "long") -> "void":
        return _cellengine.CellEngine_InitScreen(self, ww, hh)

    def SetRect(self, xx: "long", yy: "long", ww: "long", hh: "long") -> "void":
        return _cellengine.CellEngine_SetRect(self, xx, yy, ww, hh)

    def SetPos(self, xx: "long", yy: "long") -> "void":
        return _cellengine.CellEngine_SetPos(self, xx, yy)

    def SetSize(self, ww: "long", hh: "long") -> "void":
        return _cellengine.CellEngine_SetSize(self, ww, hh)

    def ForceOnScreen(self) -> "void":
        return _cellengine.CellEngine_ForceOnScreen(self)

    def OnScreen(self) -> "long":
        return _cellengine.CellEngine_OnScreen(self)

    def Garble(self) -> "void":
        return _cellengine.CellEngine_Garble(self)

    def GarbleRect(self, xx: "long", yy: "long", ww: "long", hh: "long") -> "void":
        return _cellengine.CellEngine_GarbleRect(self, xx, yy, ww, hh)

    def Fill(self, c: "Byte") -> "void":
        return _cellengine.CellEngine_Fill(self, c)

    def FillRect(self, c: "Byte", xx: "long", yy: "long", ww: "long", hh: "long") -> "void":
        return _cellengine.CellEngine_FillRect(self, c, xx, yy, ww, hh)

    def ResetMask(self) -> "void":
        return _cellengine.CellEngine_ResetMask(self)

    def SetMask(self, ww: "long", hh: "long", data: "Byte *", rb: "long") -> "void":
        return _cellengine.CellEngine_SetMask(self, ww, hh, data, rb)

    def UpdateClip(self) -> "void":
        return _cellengine.CellEngine_UpdateClip(self)

    def LoadRule(self, name: "char const *") -> "void":
        return _cellengine.CellEngine_LoadRule(self, name)

    def LoadRuleData(self, stream: "char const *") -> "void":
        return _cellengine.CellEngine_LoadRuleData(self, stream)

    def LoadStaticRuleData(self, stream: "char const *") -> "void":
        return _cellengine.CellEngine_LoadStaticRuleData(self, stream)

    def SetRuleTable(self, rule: "char const *", ruleSize: "int", neigh: "int") -> "void":
        return _cellengine.CellEngine_SetRuleTable(self, rule, ruleSize, neigh)

    def CountRules(self) -> "int":
        return _cellengine.CellEngine_CountRules(self)

    def GetRuleName(self, i: "int") -> "char const *":
        return _cellengine.CellEngine_GetRuleName(self, i)

    def GetRuleData(self, i: "int") -> "char const *":
        return _cellengine.CellEngine_GetRuleData(self, i)

    def DoPhysics(self) -> "long":
        return _cellengine.CellEngine_DoPhysics(self)

    def DoRule(self) -> "long":
        return _cellengine.CellEngine_DoRule(self)

    def PostRule(self) -> "void":
        return _cellengine.CellEngine_PostRule(self)

    def CopyToBack(self) -> "void":
        return _cellengine.CellEngine_CopyToBack(self)

    def PumpToFront(self) -> "void":
        return _cellengine.CellEngine_PumpToFront(self)

    def GetCell(self, col: "int", row: "int") -> "Byte":
        return _cellengine.CellEngine_GetCell(self, col, row)

    def SetCell(self, col: "int", row: "int", cell: "Byte") -> "void":
        return _cellengine.CellEngine_SetCell(self, col, row, cell)

    def GetCellBuffer(self) -> "void *":
        return _cellengine.CellEngine_GetCellBuffer(self)

    def n_moore_a(self) -> "void":
        return _cellengine.CellEngine_n_moore_a(self)

    def n_moore_ab(self) -> "void":
        return _cellengine.CellEngine_n_moore_ab(self)

    def n_vonn_neumann(self) -> "void":
        return _cellengine.CellEngine_n_vonn_neumann(self)

    def n_margolis(self) -> "void":
        return _cellengine.CellEngine_n_margolis(self)

    def n_margolis_ph(self) -> "void":
        return _cellengine.CellEngine_n_margolis_ph(self)

    def n_margolis_hv(self) -> "void":
        return _cellengine.CellEngine_n_margolis_hv(self)

    def n_life(self) -> "void":
        return _cellengine.CellEngine_n_life(self)

    def n_brain(self) -> "void":
        return _cellengine.CellEngine_n_brain(self)

    def n_heat(self) -> "void":
        return _cellengine.CellEngine_n_heat(self)

    def n_dheat(self) -> "void":
        return _cellengine.CellEngine_n_dheat(self)

    def n_lheat(self) -> "void":
        return _cellengine.CellEngine_n_lheat(self)

    def n_ldheat(self) -> "void":
        return _cellengine.CellEngine_n_ldheat(self)

    def n_abdheat(self) -> "void":
        return _cellengine.CellEngine_n_abdheat(self)

    def n_abcdheat(self) -> "void":
        return _cellengine.CellEngine_n_abcdheat(self)

    def n_edheat(self) -> "void":
        return _cellengine.CellEngine_n_edheat(self)

    def n_ranch(self) -> "void":
        return _cellengine.CellEngine_n_ranch(self)

    def n_anneal(self) -> "void":
        return _cellengine.CellEngine_n_anneal(self)

    def n_anneal4(self) -> "void":
        return _cellengine.CellEngine_n_anneal4(self)

    def n_anneal8(self) -> "void":
        return _cellengine.CellEngine_n_anneal8(self)

    def n_eco(self) -> "void":
        return _cellengine.CellEngine_n_eco(self)

    def n_torben(self) -> "void":
        return _cellengine.CellEngine_n_torben(self)

    def n_torben2(self) -> "void":
        return _cellengine.CellEngine_n_torben2(self)

    def n_torben3(self) -> "void":
        return _cellengine.CellEngine_n_torben3(self)

    def n_torben4(self) -> "void":
        return _cellengine.CellEngine_n_torben4(self)

    def n_ball(self) -> "void":
        return _cellengine.CellEngine_n_ball(self)

    def n_fdheat(self) -> "void":
        return _cellengine.CellEngine_n_fdheat(self)

    def n_fabcdheat(self) -> "void":
        return _cellengine.CellEngine_n_fabcdheat(self)

    def n_risca(self) -> "void":
        return _cellengine.CellEngine_n_risca(self)

    def n_insert(self) -> "void":
        return _cellengine.CellEngine_n_insert(self)

    def n_heaco(self) -> "void":
        return _cellengine.CellEngine_n_heaco(self)

    def n_marble(self) -> "void":
        return _cellengine.CellEngine_n_marble(self)

    def n_smarble(self) -> "void":
        return _cellengine.CellEngine_n_smarble(self)

    def n_farble(self) -> "void":
        return _cellengine.CellEngine_n_farble(self)

    def n_garble(self) -> "void":
        return _cellengine.CellEngine_n_garble(self)

    def n_garblebug(self) -> "void":
        return _cellengine.CellEngine_n_garblebug(self)

    def n_twoheats(self) -> "void":
        return _cellengine.CellEngine_n_twoheats(self)

    def n_spin(self) -> "void":
        return _cellengine.CellEngine_n_spin(self)

    def n_driven(self) -> "void":
        return _cellengine.CellEngine_n_driven(self)

    def n_daft(self) -> "void":
        return _cellengine.CellEngine_n_daft(self)

    def n_spinsonly(self) -> "void":
        return _cellengine.CellEngine_n_spinsonly(self)

    def n_spinsbank(self) -> "void":
        return _cellengine.CellEngine_n_spinsbank(self)

    def n_spinsheat(self) -> "void":
        return _cellengine.CellEngine_n_spinsheat(self)

    def n_spinglass(self) -> "void":
        return _cellengine.CellEngine_n_spinglass(self)

    def n_glassbonds(self) -> "void":
        return _cellengine.CellEngine_n_glassbonds(self)

    def n_glassheat(self) -> "void":
        return _cellengine.CellEngine_n_glassheat(self)

    def n_faders(self) -> "void":
        return _cellengine.CellEngine_n_faders(self)

    def n_harble(self) -> "void":
        return _cellengine.CellEngine_n_harble(self)

    def n_perlin(self) -> "void":
        return _cellengine.CellEngine_n_perlin(self)

    def n_dendrite(self) -> "void":
        return _cellengine.CellEngine_n_dendrite(self)

    def n_vanneal(self) -> "void":
        return _cellengine.CellEngine_n_vanneal(self)

    def n_vanneal8(self) -> "void":
        return _cellengine.CellEngine_n_vanneal8(self)

    def n_jvn29(self) -> "void":
        return _cellengine.CellEngine_n_jvn29(self)

    def SetRuleBuffer(self, buf: "PyObject *", neigh: "int") -> "void":
        return _cellengine.CellEngine_SetRuleBuffer(self, buf, neigh)

# Register CellEngine in _cellengine:
_cellengine.CellEngine_swigregister(CellEngine)

EVENT_BOUNCE_TOP = _cellengine.EVENT_BOUNCE_TOP
EVENT_BOUNCE_BOTTOM = _cellengine.EVENT_BOUNCE_BOTTOM
EVENT_BOUNCE_LEFT = _cellengine.EVENT_BOUNCE_LEFT
EVENT_BOUNCE_RIGHT = _cellengine.EVENT_BOUNCE_RIGHT
EVENT_MOVE = _cellengine.EVENT_MOVE
sNORTHWEST = _cellengine.sNORTHWEST
sNORTH = _cellengine.sNORTH
sNORTHEAST = _cellengine.sNORTHEAST
sWEST = _cellengine.sWEST
sCENTER = _cellengine.sCENTER
sEAST = _cellengine.sEAST
sSOUTHWEST = _cellengine.sSOUTHWEST
sSOUTH = _cellengine.sSOUTH
sSOUTHEAST = _cellengine.sSOUTHEAST


